!("requestVideoFrameCallback"in HTMLVideoElement.prototype) && "getVideoPlaybackQuality"in HTMLVideoElement.prototype && (HTMLVideoElement.prototype._rvfcpolyfillmap = {},
HTMLVideoElement.prototype.requestVideoFrameCallback = function(e) {
    const t = performance.now()
      , i = this.getVideoPlaybackQuality()
      , a = this.mozPresentedFrames || this.mozPaintedFrames || i.totalVideoFrames - i.droppedVideoFrames
      , o = (l,r)=>{
        const m = this.getVideoPlaybackQuality()
          , s = this.mozPresentedFrames || this.mozPaintedFrames || m.totalVideoFrames - m.droppedVideoFrames;
        if (s > a) {
            const a = this.mozFrameDelay || m.totalFrameDelay - i.totalFrameDelay || 0
              , o = r - l;
            e(r, {
                presentationTime: r + 1e3 * a,
                expectedDisplayTime: r + o,
                width: this.videoWidth,
                height: this.videoHeight,
                mediaTime: Math.max(0, this.currentTime || 0) + o / 1e3,
                presentedFrames: s,
                processingDuration: a
            }),
            delete this._rvfcpolyfillmap[t];
        } else
            this._rvfcpolyfillmap[t] = requestAnimationFrame((e=>o(r, e)));
    }
    ;
    return this._rvfcpolyfillmap[t] = requestAnimationFrame((e=>o(t, e))),
    t
}
,
HTMLVideoElement.prototype.cancelVideoFrameCallback = function(e) {
    cancelAnimationFrame(this._rvfcpolyfillmap[e]),
    delete this._rvfcpolyfillmap[e];
}
);

const TrackingMode = {
    Image: 1,
    QRCode: 2,
    Surface: 3,
    Spatial: 4
}
  , ImageTrackingMode = {
    Image: 1,
    World: 2,
    Rotation: 3
}
  , SurfaceMode = {
    WebXR: 1,
    SLAM: 2,
    Gyroscope: 3
}
  , Events = {
    OnDetected: 1,
    OnPose: 2,
    OnLost: 3,
    OnResize: 4,
    OnTouch: 5,
    OnHitTestResult: 6,
    OnKeyFrame: 7,
    OnStatusChange: 8,
    OnSessionEnd: 9,
    OnFrame: 10,
    OnTouchStart: 11,
    OnTouchEnd: 12,
    OnTouchMove: 13
}
  , DefaultConfig = {
    imageTrackingMode: 1,
    useVocabulary: !1,
    forceCompatWorldTracking: !1,
    forceRotationOnlyTracking: !1,
    debug: !1,
    cameraAccess: !1,
    highResolutionCamera: !1
};

class InternalError extends Error {
    constructor(r) {
        super(r),
        this.name = "INTERNAL_ERROR";
    }
}
class LicenseError extends Error {
    constructor(r, s) {
        super(r),
        this.name = "LICENSE_ERROR",
        this.oxError = s;
    }
}
class CameraError extends Error {
    constructor(r) {
        super(r),
        this.name = "CAMERA_ERROR";
    }
}
class SensorsError extends Error {
    constructor(r) {
        super(r),
        this.name = "SENSORS_ERROR";
    }
}
class ReconstructionPendingError extends Error {
    constructor(r) {
        super(r),
        this.name = "RECONSTRUCTION_PENDING_ERROR";
    }
}

const BROWSER_ALIASES_MAP = {
    "Amazon Silk": "amazon_silk",
    "Android Browser": "android",
    Bada: "bada",
    BlackBerry: "blackberry",
    Chrome: "chrome",
    Chromium: "chromium",
    Electron: "electron",
    Epiphany: "epiphany",
    Firefox: "firefox",
    Focus: "focus",
    Generic: "generic",
    "Google Search": "google_search",
    Googlebot: "googlebot",
    "Internet Explorer": "ie",
    "K-Meleon": "k_meleon",
    Maxthon: "maxthon",
    "Microsoft Edge": "edge",
    "MZ Browser": "mz",
    "NAVER Whale Browser": "naver",
    Opera: "opera",
    "Opera Coast": "opera_coast",
    PhantomJS: "phantomjs",
    Puffin: "puffin",
    QupZilla: "qupzilla",
    QQ: "qq",
    QQLite: "qqlite",
    Safari: "safari",
    Sailfish: "sailfish",
    "Samsung Internet for Android": "samsung_internet",
    SeaMonkey: "seamonkey",
    Sleipnir: "sleipnir",
    Swing: "swing",
    Tizen: "tizen",
    "UC Browser": "uc",
    Vivaldi: "vivaldi",
    "WebOS Browser": "webos",
    WeChat: "wechat",
    "Yandex Browser": "yandex",
    Roku: "roku"
};
const BROWSER_MAP = {
    amazon_silk: "Amazon Silk",
    android: "Android Browser",
    bada: "Bada",
    blackberry: "BlackBerry",
    chrome: "Chrome",
    chromium: "Chromium",
    electron: "Electron",
    epiphany: "Epiphany",
    firefox: "Firefox",
    focus: "Focus",
    generic: "Generic",
    googlebot: "Googlebot",
    google_search: "Google Search",
    ie: "Internet Explorer",
    k_meleon: "K-Meleon",
    maxthon: "Maxthon",
    edge: "Microsoft Edge",
    mz: "MZ Browser",
    naver: "NAVER Whale Browser",
    opera: "Opera",
    opera_coast: "Opera Coast",
    phantomjs: "PhantomJS",
    puffin: "Puffin",
    qupzilla: "QupZilla",
    qq: "QQ Browser",
    qqlite: "QQ Browser Lite",
    safari: "Safari",
    sailfish: "Sailfish",
    samsung_internet: "Samsung Internet for Android",
    seamonkey: "SeaMonkey",
    sleipnir: "Sleipnir",
    swing: "Swing",
    tizen: "Tizen",
    uc: "UC Browser",
    vivaldi: "Vivaldi",
    webos: "WebOS Browser",
    wechat: "WeChat",
    yandex: "Yandex Browser"
};
const PLATFORMS_MAP = {
    tablet: "tablet",
    mobile: "mobile",
    desktop: "desktop",
    tv: "tv"
};
const OS_MAP = {
    WindowsPhone: "Windows Phone",
    Windows: "Windows",
    MacOS: "macOS",
    iOS: "iOS",
    Android: "Android",
    WebOS: "WebOS",
    BlackBerry: "BlackBerry",
    Bada: "Bada",
    Tizen: "Tizen",
    Linux: "Linux",
    ChromeOS: "Chrome OS",
    PlayStation4: "PlayStation 4",
    Roku: "Roku"
};
const ENGINE_MAP = {
    EdgeHTML: "EdgeHTML",
    Blink: "Blink",
    Trident: "Trident",
    Presto: "Presto",
    Gecko: "Gecko",
    WebKit: "WebKit"
};

class Utils {
    static getFirstMatch(t, e) {
        const r = e.match(t);
        return r && r.length > 0 && r[1] || ""
    }
    static getSecondMatch(t, e) {
        const r = e.match(t);
        return r && r.length > 1 && r[2] || ""
    }
    static matchAndReturnConst(t, e, r) {
        if (t.test(e))
            return r
    }
    static getWindowsVersionName(t) {
        switch (t) {
        case "NT":
            return "NT";
        case "XP":
        case "NT 5.1":
            return "XP";
        case "NT 5.0":
            return "2000";
        case "NT 5.2":
            return "2003";
        case "NT 6.0":
            return "Vista";
        case "NT 6.1":
            return "7";
        case "NT 6.2":
            return "8";
        case "NT 6.3":
            return "8.1";
        case "NT 10.0":
            return "10";
        default:
            return
        }
    }
    static getMacOSVersionName(t) {
        const e = t.split(".").splice(0, 2).map((t=>parseInt(t, 10) || 0));
        if (e.push(0),
        10 === e[0])
            switch (e[1]) {
            case 5:
                return "Leopard";
            case 6:
                return "Snow Leopard";
            case 7:
                return "Lion";
            case 8:
                return "Mountain Lion";
            case 9:
                return "Mavericks";
            case 10:
                return "Yosemite";
            case 11:
                return "El Capitan";
            case 12:
                return "Sierra";
            case 13:
                return "High Sierra";
            case 14:
                return "Mojave";
            case 15:
                return "Catalina";
            default:
                return
            }
    }
    static getAndroidVersionName(t) {
        const e = t.split(".").splice(0, 2).map((t=>parseInt(t, 10) || 0));
        if (e.push(0),
        !(1 === e[0] && e[1] < 5))
            return 1 === e[0] && e[1] < 6 ? "Cupcake" : 1 === e[0] && e[1] >= 6 ? "Donut" : 2 === e[0] && e[1] < 2 ? "Eclair" : 2 === e[0] && 2 === e[1] ? "Froyo" : 2 === e[0] && e[1] > 2 ? "Gingerbread" : 3 === e[0] ? "Honeycomb" : 4 === e[0] && e[1] < 1 ? "Ice Cream Sandwich" : 4 === e[0] && e[1] < 4 ? "Jelly Bean" : 4 === e[0] && e[1] >= 4 ? "KitKat" : 5 === e[0] ? "Lollipop" : 6 === e[0] ? "Marshmallow" : 7 === e[0] ? "Nougat" : 8 === e[0] ? "Oreo" : 9 === e[0] ? "Pie" : void 0
    }
    static getVersionPrecision(t) {
        return t.split(".").length
    }
    static compareVersions(t, e, r=!1) {
        const n = Utils.getVersionPrecision(t)
          , s = Utils.getVersionPrecision(e);
        let a = Math.max(n, s)
          , i = 0;
        const c = Utils.map([t, e], (t=>{
            const e = a - Utils.getVersionPrecision(t)
              , r = t + new Array(e + 1).join(".0");
            return Utils.map(r.split("."), (t=>new Array(20 - t.length).join("0") + t)).reverse()
        }
        ));
        for (r && (i = a - Math.min(n, s)),
        a -= 1; a >= i; ) {
            if (c[0][a] > c[1][a])
                return 1;
            if (c[0][a] === c[1][a]) {
                if (a === i)
                    return 0;
                a -= 1;
            } else if (c[0][a] < c[1][a])
                return -1
        }
    }
    static map(t, e) {
        const r = [];
        let n;
        if (Array.prototype.map)
            return Array.prototype.map.call(t, e);
        for (n = 0; n < t.length; n += 1)
            r.push(e(t[n]));
        return r
    }
    static find(t, e) {
        let r, n;
        if (Array.prototype.find)
            return Array.prototype.find.call(t, e);
        for (r = 0,
        n = t.length; r < n; r += 1) {
            const n = t[r];
            if (e(n, r))
                return n
        }
    }
    static assign(t, ...e) {
        const r = t;
        let n, s;
        if (Object.assign)
            return Object.assign(t, ...e);
        for (n = 0,
        s = e.length; n < s; n += 1) {
            const t = e[n];
            if ("object" == typeof t && null !== t) {
                Object.keys(t).forEach((e=>{
                    r[e] = t[e];
                }
                ));
            }
        }
        return t
    }
    static getBrowserAlias(t) {
        return BROWSER_ALIASES_MAP[t]
    }
    static getBrowserTypeByAlias(t) {
        return BROWSER_MAP[t] || ""
    }
}

const commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i
  , browsersList = [{
    test: [/googlebot/i],
    describe(e) {
        const t = {
            name: "Googlebot"
        }
          , i = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/opera/i],
    describe(e) {
        const t = {
            name: "Opera"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/opr\/|opios/i],
    describe(e) {
        const t = {
            name: "Opera"
        }
          , i = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/SamsungBrowser/i],
    describe(e) {
        const t = {
            name: "Samsung Internet for Android"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/Whale/i],
    describe(e) {
        const t = {
            name: "NAVER Whale Browser"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/MZBrowser/i],
    describe(e) {
        const t = {
            name: "MZ Browser"
        }
          , i = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/focus/i],
    describe(e) {
        const t = {
            name: "Focus"
        }
          , i = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/swing/i],
    describe(e) {
        const t = {
            name: "Swing"
        }
          , i = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/coast/i],
    describe(e) {
        const t = {
            name: "Opera Coast"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/opt\/\d+(?:.?_?\d+)+/i],
    describe(e) {
        const t = {
            name: "Opera Touch"
        }
          , i = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/yabrowser/i],
    describe(e) {
        const t = {
            name: "Yandex Browser"
        }
          , i = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/ucbrowser/i],
    describe(e) {
        const t = {
            name: "UC Browser"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/Maxthon|mxios/i],
    describe(e) {
        const t = {
            name: "Maxthon"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/epiphany/i],
    describe(e) {
        const t = {
            name: "Epiphany"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/puffin/i],
    describe(e) {
        const t = {
            name: "Puffin"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/sleipnir/i],
    describe(e) {
        const t = {
            name: "Sleipnir"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/k-meleon/i],
    describe(e) {
        const t = {
            name: "K-Meleon"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/micromessenger/i],
    describe(e) {
        const t = {
            name: "WeChat"
        }
          , i = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/qqbrowser/i],
    describe(e) {
        const t = {
            name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
        }
          , i = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/msie|trident/i],
    describe(e) {
        const t = {
            name: "Internet Explorer"
        }
          , i = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/\sedg\//i],
    describe(e) {
        const t = {
            name: "Microsoft Edge"
        }
          , i = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/edg([ea]|ios)/i],
    describe(e) {
        const t = {
            name: "Microsoft Edge"
        }
          , i = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/vivaldi/i],
    describe(e) {
        const t = {
            name: "Vivaldi"
        }
          , i = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/seamonkey/i],
    describe(e) {
        const t = {
            name: "SeaMonkey"
        }
          , i = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/sailfish/i],
    describe(e) {
        const t = {
            name: "Sailfish"
        }
          , i = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/silk/i],
    describe(e) {
        const t = {
            name: "Amazon Silk"
        }
          , i = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/phantom/i],
    describe(e) {
        const t = {
            name: "PhantomJS"
        }
          , i = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/slimerjs/i],
    describe(e) {
        const t = {
            name: "SlimerJS"
        }
          , i = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(e) {
        const t = {
            name: "BlackBerry"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/(web|hpw)[o0]s/i],
    describe(e) {
        const t = {
            name: "WebOS Browser"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/bada/i],
    describe(e) {
        const t = {
            name: "Bada"
        }
          , i = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/tizen/i],
    describe(e) {
        const t = {
            name: "Tizen"
        }
          , i = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/qupzilla/i],
    describe(e) {
        const t = {
            name: "QupZilla"
        }
          , i = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/firefox|iceweasel|fxios/i],
    describe(e) {
        const t = {
            name: "Firefox"
        }
          , i = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/electron/i],
    describe(e) {
        const t = {
            name: "Electron"
        }
          , i = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/MiuiBrowser/i],
    describe(e) {
        const t = {
            name: "Miui"
        }
          , i = Utils.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/chromium/i],
    describe(e) {
        const t = {
            name: "Chromium"
        }
          , i = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/chrome|crios|crmo/i],
    describe(e) {
        const t = {
            name: "Chrome"
        }
          , i = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/GSA/i],
    describe(e) {
        const t = {
            name: "Google Search"
        }
          , i = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
        return i && (t.version = i),
        t
    }
}, {
    test(e) {
        const t = !e.test(/like android/i)
          , i = e.test(/android/i);
        return t && i
    },
    describe(e) {
        const t = {
            name: "Android Browser"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/playstation 4/i],
    describe(e) {
        const t = {
            name: "PlayStation 4"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/safari|applewebkit/i],
    describe(e) {
        const t = {
            name: "Safari"
        }
          , i = Utils.getFirstMatch(commonVersionIdentifier, e);
        return i && (t.version = i),
        t
    }
}, {
    test: [/.*/i],
    describe(e) {
        const t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
        return {
            name: Utils.getFirstMatch(t, e),
            version: Utils.getSecondMatch(t, e)
        }
    }
}];

var osParsersList = [{
    test: [/Roku\/DVP/],
    describe(t) {
        const e = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, t);
        return {
            name: OS_MAP.Roku,
            version: e
        }
    }
}, {
    test: [/windows phone/i],
    describe(t) {
        const e = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, t);
        return {
            name: OS_MAP.WindowsPhone,
            version: e
        }
    }
}, {
    test: [/windows /i],
    describe(t) {
        const e = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, t)
          , s = Utils.getWindowsVersionName(e);
        return {
            name: OS_MAP.Windows,
            version: e,
            versionName: s
        }
    }
}, {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe(t) {
        const e = {
            name: OS_MAP.iOS
        }
          , s = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, t);
        return s && (e.version = s),
        e
    }
}, {
    test: [/macintosh/i],
    describe(t) {
        const e = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, t).replace(/[_\s]/g, ".")
          , s = Utils.getMacOSVersionName(e)
          , i = {
            name: OS_MAP.MacOS,
            version: e
        };
        return s && (i.versionName = s),
        i
    }
}, {
    test: [/(ipod|iphone|ipad)/i],
    describe(t) {
        const e = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, t).replace(/[_\s]/g, ".");
        return {
            name: OS_MAP.iOS,
            version: e
        }
    }
}, {
    test(t) {
        const e = !t.test(/like android/i)
          , s = t.test(/android/i);
        return e && s
    },
    describe(t) {
        const e = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, t)
          , s = Utils.getAndroidVersionName(e)
          , i = {
            name: OS_MAP.Android,
            version: e
        };
        return s && (i.versionName = s),
        i
    }
}, {
    test: [/(web|hpw)[o0]s/i],
    describe(t) {
        const e = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, t)
          , s = {
            name: OS_MAP.WebOS
        };
        return e && e.length && (s.version = e),
        s
    }
}, {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(t) {
        const e = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, t) || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, t) || Utils.getFirstMatch(/\bbb(\d+)/i, t);
        return {
            name: OS_MAP.BlackBerry,
            version: e
        }
    }
}, {
    test: [/bada/i],
    describe(t) {
        const e = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, t);
        return {
            name: OS_MAP.Bada,
            version: e
        }
    }
}, {
    test: [/tizen/i],
    describe(t) {
        const e = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, t);
        return {
            name: OS_MAP.Tizen,
            version: e
        }
    }
}, {
    test: [/linux/i],
    describe: ()=>({
        name: OS_MAP.Linux
    })
}, {
    test: [/CrOS/],
    describe: ()=>({
        name: OS_MAP.ChromeOS
    })
}, {
    test: [/PlayStation 4/],
    describe(t) {
        const e = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, t);
        return {
            name: OS_MAP.PlayStation4,
            version: e
        }
    }
}];

var platformParsersList = [{
    test: [/googlebot/i],
    describe: ()=>({
        type: "bot",
        vendor: "Google"
    })
}, {
    test: [/huawei/i],
    describe(e) {
        const t = Utils.getFirstMatch(/(can-l01)/i, e) && "Nova"
          , i = {
            type: PLATFORMS_MAP.mobile,
            vendor: "Huawei"
        };
        return t && (i.model = t),
        i
    }
}, {
    test: [/nexus\s*(?:7|8|9|10).*/i],
    describe: ()=>({
        type: PLATFORMS_MAP.tablet,
        vendor: "Nexus"
    })
}, {
    test: [/ipad/i],
    describe: ()=>({
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
    })
}, {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe: ()=>({
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
    })
}, {
    test: [/kftt build/i],
    describe: ()=>({
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon",
        model: "Kindle Fire HD 7"
    })
}, {
    test: [/silk/i],
    describe: ()=>({
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon"
    })
}, {
    test: [/tablet(?! pc)/i],
    describe: ()=>({
        type: PLATFORMS_MAP.tablet
    })
}, {
    test(e) {
        const t = e.test(/ipod|iphone/i)
          , i = e.test(/like (ipod|iphone)/i);
        return t && !i
    },
    describe(e) {
        const t = Utils.getFirstMatch(/(ipod|iphone)/i, e);
        return {
            type: PLATFORMS_MAP.mobile,
            vendor: "Apple",
            model: t
        }
    }
}, {
    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
    describe: ()=>({
        type: PLATFORMS_MAP.mobile,
        vendor: "Nexus"
    })
}, {
    test: [/[^-]mobi/i],
    describe: ()=>({
        type: PLATFORMS_MAP.mobile
    })
}, {
    test: e=>"blackberry" === e.getBrowserName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.mobile,
        vendor: "BlackBerry"
    })
}, {
    test: e=>"bada" === e.getBrowserName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.mobile
    })
}, {
    test: e=>"windows phone" === e.getBrowserName(),
    describe: ()=>({
        type: PLATFORMS_MAP.mobile,
        vendor: "Microsoft"
    })
}, {
    test(e) {
        const t = Number(String(e.getOSVersion()).split(".")[0]);
        return "android" === e.getOSName(!0) && t >= 3
    },
    describe: ()=>({
        type: PLATFORMS_MAP.tablet
    })
}, {
    test: e=>"android" === e.getOSName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.mobile
    })
}, {
    test: e=>"macos" === e.getOSName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.desktop,
        vendor: "Apple"
    })
}, {
    test: e=>"windows" === e.getOSName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.desktop
    })
}, {
    test: e=>"linux" === e.getOSName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.desktop
    })
}, {
    test: e=>"playstation 4" === e.getOSName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.tv
    })
}, {
    test: e=>"roku" === e.getOSName(!0),
    describe: ()=>({
        type: PLATFORMS_MAP.tv
    })
}];

var enginesParsersList = [{
    test: t=>"microsoft edge" === t.getBrowserName(!0),
    describe(t) {
        if (/\sedg\//i.test(t))
            return {
                name: ENGINE_MAP.Blink
            };
        const e = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, t);
        return {
            name: ENGINE_MAP.EdgeHTML,
            version: e
        }
    }
}, {
    test: [/trident/i],
    describe(t) {
        const e = {
            name: ENGINE_MAP.Trident
        }
          , i = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, t);
        return i && (e.version = i),
        e
    }
}, {
    test: t=>t.test(/presto/i),
    describe(t) {
        const e = {
            name: ENGINE_MAP.Presto
        }
          , i = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, t);
        return i && (e.version = i),
        e
    }
}, {
    test(t) {
        const e = t.test(/gecko/i)
          , i = t.test(/like gecko/i);
        return e && !i
    },
    describe(t) {
        const e = {
            name: ENGINE_MAP.Gecko
        }
          , i = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, t);
        return i && (e.version = i),
        e
    }
}, {
    test: [/(apple)?webkit\/537\.36/i],
    describe: ()=>({
        name: ENGINE_MAP.Blink
    })
}, {
    test: [/(apple)?webkit/i],
    describe(t) {
        const e = {
            name: ENGINE_MAP.WebKit
        }
          , i = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, t);
        return i && (e.version = i),
        e
    }
}];

class Parser {
    constructor(s, t=!1) {
        if (null == s || "" === s)
            throw new Error("UserAgent parameter can't be empty");
        this._ua = s,
        this.parsedResult = {},
        !0 !== t && this.parse();
    }
    getUA() {
        return this._ua
    }
    test(s) {
        return s.test(this._ua)
    }
    parseBrowser() {
        this.parsedResult.browser = {};
        const s = Utils.find(browsersList, (s=>{
            if ("function" == typeof s.test)
                return s.test(this);
            if (s.test instanceof Array)
                return s.test.some((s=>this.test(s)));
            throw new Error("Browser's test function is not valid")
        }
        ));
        return s && (this.parsedResult.browser = s.describe(this.getUA())),
        this.parsedResult.browser
    }
    getBrowser() {
        return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser()
    }
    getBrowserName(s) {
        return s ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || ""
    }
    getBrowserVersion() {
        return this.getBrowser().version
    }
    getOS() {
        return this.parsedResult.os ? this.parsedResult.os : this.parseOS()
    }
    parseOS() {
        this.parsedResult.os = {};
        const s = Utils.find(osParsersList, (s=>{
            if ("function" == typeof s.test)
                return s.test(this);
            if (s.test instanceof Array)
                return s.test.some((s=>this.test(s)));
            throw new Error("Browser's test function is not valid")
        }
        ));
        return s && (this.parsedResult.os = s.describe(this.getUA())),
        this.parsedResult.os
    }
    getOSName(s) {
        const {name: t} = this.getOS();
        return s ? String(t).toLowerCase() || "" : t || ""
    }
    getOSVersion() {
        return this.getOS().version
    }
    getPlatform() {
        return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform()
    }
    getPlatformType(s=!1) {
        const {type: t} = this.getPlatform();
        return s ? String(t).toLowerCase() || "" : t || ""
    }
    parsePlatform() {
        this.parsedResult.platform = {};
        const s = Utils.find(platformParsersList, (s=>{
            if ("function" == typeof s.test)
                return s.test(this);
            if (s.test instanceof Array)
                return s.test.some((s=>this.test(s)));
            throw new Error("Browser's test function is not valid")
        }
        ));
        return s && (this.parsedResult.platform = s.describe(this.getUA())),
        this.parsedResult.platform
    }
    getEngine() {
        return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine()
    }
    getEngineName(s) {
        return s ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || ""
    }
    parseEngine() {
        this.parsedResult.engine = {};
        const s = Utils.find(enginesParsersList, (s=>{
            if ("function" == typeof s.test)
                return s.test(this);
            if (s.test instanceof Array)
                return s.test.some((s=>this.test(s)));
            throw new Error("Browser's test function is not valid")
        }
        ));
        return s && (this.parsedResult.engine = s.describe(this.getUA())),
        this.parsedResult.engine
    }
    parse() {
        return this.parseBrowser(),
        this.parseOS(),
        this.parsePlatform(),
        this.parseEngine(),
        this
    }
    getResult() {
        return Utils.assign({}, this.parsedResult)
    }
    satisfies(s) {
        const t = {};
        let e = 0;
        const r = {};
        let i = 0;
        if (Object.keys(s).forEach((o=>{
            const n = s[o];
            "string" == typeof n ? (r[o] = n,
            i += 1) : "object" == typeof n && (t[o] = n,
            e += 1);
        }
        )),
        e > 0) {
            const s = Object.keys(t)
              , e = Utils.find(s, (s=>this.isOS(s)));
            if (e) {
                const s = this.satisfies(t[e]);
                if (void 0 !== s)
                    return s
            }
            const r = Utils.find(s, (s=>this.isPlatform(s)));
            if (r) {
                const s = this.satisfies(t[r]);
                if (void 0 !== s)
                    return s
            }
        }
        if (i > 0) {
            const s = Object.keys(r)
              , t = Utils.find(s, (s=>this.isBrowser(s, !0)));
            if (void 0 !== t)
                return this.compareVersion(r[t])
        }
    }
    isBrowser(s, t=!1) {
        const e = this.getBrowserName().toLowerCase();
        let r = s.toLowerCase();
        const i = Utils.getBrowserTypeByAlias(r);
        return t && i && (r = i.toLowerCase()),
        r === e
    }
    compareVersion(s) {
        let t = [0]
          , e = s
          , r = !1;
        const i = this.getBrowserVersion();
        if ("string" == typeof i)
            return ">" === s[0] || "<" === s[0] ? (e = s.substr(1),
            "=" === s[1] ? (r = !0,
            e = s.substr(2)) : t = [],
            ">" === s[0] ? t.push(1) : t.push(-1)) : "=" === s[0] ? e = s.substr(1) : "~" === s[0] && (r = !0,
            e = s.substr(1)),
            t.indexOf(Utils.compareVersions(i, e, r)) > -1
    }
    isOS(s) {
        return this.getOSName(!0) === String(s).toLowerCase()
    }
    isPlatform(s) {
        return this.getPlatformType(!0) === String(s).toLowerCase()
    }
    isEngine(s) {
        return this.getEngineName(!0) === String(s).toLowerCase()
    }
    is(s, t=!1) {
        return this.isBrowser(s, t) || this.isOS(s) || this.isPlatform(s)
    }
    some(s=[]) {
        return s.some((s=>this.is(s)))
    }
}

class Bowser {
    static getParser(r, t=!1) {
        if ("string" != typeof r)
            throw new Error("UserAgent should be a string");
        return new Parser(r,t)
    }
    static parse(r) {
        return new Parser(r).getResult()
    }
    static get BROWSER_MAP() {
        return BROWSER_MAP
    }
    static get ENGINE_MAP() {
        return ENGINE_MAP
    }
    static get OS_MAP() {
        return OS_MAP
    }
    static get PLATFORMS_MAP() {
        return PLATFORMS_MAP
    }
}

class DeviceManager {
    constructor() {
        const e = Bowser.getParser(window.navigator.userAgent);
        this.setupDeviceId(),
        this.setupPlatform(e),
        this.parseOS(e),
        this.parseType(e);
    }
    setupDeviceId() {
        this.device = localStorage.getItem("_deviceId"),
        this.device || (this.device = "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (e=>(e ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> e / 4).toString(16))),
        localStorage.setItem("_deviceId", this.device));
    }
    setupPlatform(e) {
        this.platform = `${e.getBrowser().name}-${e.getOS().name}`;
    }
    parseOS(e) {
        e.getOS().name === Bowser.OS_MAP.iOS || "MacIntel" === navigator.platform && navigator.maxTouchPoints > 1 ? this.os = DeviceManager.OS.iOS : e.getOS().name === Bowser.OS_MAP.Android ? this.os = DeviceManager.OS.Android : e.getOS().name === Bowser.OS_MAP.MacOS ? this.os = DeviceManager.OS.Mac : e.getOS().name === Bowser.OS_MAP.Windows ? this.os = DeviceManager.OS.PC : this.os = DeviceManager.OS.Other;
    }
    parseType(e) {
        e.getPlatform().type === Bowser.PLATFORMS_MAP.tablet || "MacIntel" === navigator.platform && navigator.maxTouchPoints > 1 ? this.type = DeviceManager.Type.Tablet : e.getPlatform().type === Bowser.PLATFORMS_MAP.mobile ? this.type = DeviceManager.Type.Mobile : this.type = DeviceManager.Type.Desktop;
    }
}
DeviceManager.OS = {
    Android: 0,
    iOS: 1,
    PC: 2,
    Mac: 3,
    Other: 4
},
DeviceManager.Type = {
    Mobile: 0,
    Tablet: 1,
    Desktop: 2
};

class Vector3 {
    constructor(t=0, s=0, i=0) {
        this.x = t,
        this.y = s,
        this.z = i;
    }
    add(t) {
        return this.x += t.x,
        this.y += t.y,
        this.z += t.z,
        this
    }
    addScalar(t) {
        return this.x += t,
        this.y += t,
        this.z += t,
        this
    }
    sub(t) {
        return this.x -= t.x,
        this.y -= t.y,
        this.z -= t.z,
        this
    }
    subScalar(t) {
        return this.x -= t,
        this.y -= t,
        this.z -= t,
        this
    }
    multiply(t) {
        return this.x *= t.x,
        this.y *= t.y,
        this.z *= t.z,
        this
    }
    multiplyScalar(t) {
        return this.x *= t,
        this.y *= t,
        this.z *= t,
        this
    }
    divide(t) {
        return this.x /= t.x,
        this.y /= t.y,
        this.z /= t.z,
        this
    }
    divideScalar(t) {
        return this.x /= t,
        this.y /= t,
        this.z /= t,
        this
    }
    dot(t) {
        return this.x * t.x + this.y * t.y + this.z * t.z
    }
    cross(t) {
        let s = this.x
          , i = this.y
          , h = this.z
          , r = t.x
          , e = t.y
          , y = t.z;
        return this.x = i * y - h * e,
        this.y = h * r - s * y,
        this.z = s * e - i * r,
        this
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
    }
    normalize() {
        return this.divideScalar(this.length() || 1)
    }
    toArray() {
        const t = [];
        return t[0] = this.x,
        t[1] = this.y,
        t[2] = this.z,
        t
    }
    clone() {
        return new this.constructor(this.x,this.y,this.z)
    }
}

class Matrix3 {
    constructor() {
        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    }
    set(t, e, s, r, n, i, o, a, c) {
        const h = this.elements;
        return h[0] = t,
        h[1] = r,
        h[2] = o,
        h[3] = e,
        h[4] = n,
        h[5] = a,
        h[6] = s,
        h[7] = i,
        h[8] = c,
        this
    }
    identity() {
        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1),
        this
    }
    multiply(t) {
        return this.multiplyMatrices(this, t)
    }
    premultiply(t) {
        return this.multiplyMatrices(t, this)
    }
    multiplyMatrices(t, e) {
        const s = t.elements
          , r = e.elements
          , n = this.elements
          , i = s[0]
          , o = s[3]
          , a = s[6]
          , c = s[1]
          , h = s[4]
          , l = s[7]
          , m = s[2]
          , u = s[5]
          , y = s[8]
          , M = r[0]
          , p = r[3]
          , k = r[6]
          , b = r[1]
          , X = r[4]
          , Y = r[7]
          , Z = r[2]
          , x = r[5]
          , f = r[8];
        return n[0] = i * M + o * b + a * Z,
        n[3] = i * p + o * X + a * x,
        n[6] = i * k + o * Y + a * f,
        n[1] = c * M + h * b + l * Z,
        n[4] = c * p + h * X + l * x,
        n[7] = c * k + h * Y + l * f,
        n[2] = m * M + u * b + y * Z,
        n[5] = m * p + u * X + y * x,
        n[8] = m * k + u * Y + y * f,
        this
    }
    multiplyScalar(t) {
        const e = this.elements;
        return e[0] *= t,
        e[3] *= t,
        e[6] *= t,
        e[1] *= t,
        e[4] *= t,
        e[7] *= t,
        e[2] *= t,
        e[5] *= t,
        e[8] *= t,
        this
    }
    determinant() {
        const t = this.elements
          , e = t[0]
          , s = t[1]
          , r = t[2]
          , n = t[3]
          , i = t[4]
          , o = t[5]
          , a = t[6]
          , c = t[7]
          , h = t[8];
        return e * i * h - e * o * c - s * n * h + s * o * a + r * n * c - r * i * a
    }
    invert() {
        const t = this.elements
          , e = t[0]
          , s = t[1]
          , r = t[2]
          , n = t[3]
          , i = t[4]
          , o = t[5]
          , a = t[6]
          , c = t[7]
          , h = t[8]
          , l = h * i - o * c
          , m = o * a - h * n
          , u = c * n - i * a
          , y = e * l + s * m + r * u;
        if (0 === y)
            return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const M = 1 / y;
        return t[0] = l * M,
        t[1] = (r * c - h * s) * M,
        t[2] = (o * s - r * i) * M,
        t[3] = m * M,
        t[4] = (h * e - r * a) * M,
        t[5] = (r * n - o * e) * M,
        t[6] = u * M,
        t[7] = (s * a - c * e) * M,
        t[8] = (i * e - s * n) * M,
        this
    }
    transpose() {
        let t;
        const e = this.elements;
        return t = e[1],
        e[1] = e[3],
        e[3] = t,
        t = e[2],
        e[2] = e[6],
        e[6] = t,
        t = e[5],
        e[5] = e[7],
        e[7] = t,
        this
    }
    makeRotationFromEuler(t) {
        const e = this.elements
          , s = t.x
          , r = t.y
          , n = t.z
          , i = Math.cos(s)
          , o = Math.sin(s)
          , a = Math.cos(r)
          , c = Math.sin(r)
          , h = Math.cos(n)
          , l = Math.sin(n);
        switch (t.order) {
        case "XYZ":
            {
                const t = i * h
                  , s = i * l
                  , r = o * h
                  , n = o * l;
                e[0] = a * h,
                e[3] = -a * l,
                e[6] = c,
                e[1] = s + r * c,
                e[4] = t - n * c,
                e[7] = -o * a,
                e[2] = n - t * c,
                e[5] = r + s * c,
                e[8] = i * a;
                break
            }
        case "YXZ":
            {
                const t = a * h
                  , s = a * l
                  , r = c * h
                  , n = c * l;
                e[0] = t + n * o,
                e[3] = r * o - s,
                e[6] = i * c,
                e[1] = i * l,
                e[4] = i * h,
                e[7] = -o,
                e[2] = s * o - r,
                e[5] = n + t * o,
                e[8] = i * a;
                break
            }
        case "ZXY":
            {
                const t = a * h
                  , s = a * l
                  , r = c * h
                  , n = c * l;
                e[0] = t - n * o,
                e[3] = -i * l,
                e[6] = r + s * o,
                e[1] = s + r * o,
                e[4] = i * h,
                e[7] = n - t * o,
                e[2] = -i * c,
                e[5] = o,
                e[8] = i * a;
                break
            }
        case "ZYX":
            {
                const t = i * h
                  , s = i * l
                  , r = o * h
                  , n = o * l;
                e[0] = a * h,
                e[3] = r * c - s,
                e[6] = t * c + n,
                e[1] = a * l,
                e[4] = n * c + t,
                e[7] = s * c - r,
                e[2] = -c,
                e[5] = o * a,
                e[8] = i * a;
                break
            }
        case "YZX":
            {
                const t = i * a
                  , s = i * c
                  , r = o * a
                  , n = o * c;
                e[0] = a * h,
                e[3] = n - t * l,
                e[6] = r * l + s,
                e[1] = l,
                e[4] = i * h,
                e[7] = -o * h,
                e[2] = -c * h,
                e[5] = s * l + r,
                e[8] = t - n * l;
                break
            }
        case "XZY":
            {
                const t = i * a
                  , s = i * c
                  , r = o * a
                  , n = o * c;
                e[0] = a * h,
                e[3] = -l,
                e[6] = c * h,
                e[1] = t * l + n,
                e[4] = i * h,
                e[7] = s * l - r,
                e[2] = r * l - s,
                e[5] = o * h,
                e[8] = n * l + t;
                break
            }
        }
        return this
    }
    makeRotationFromQuaternion(t) {
        const e = this.elements
          , s = t.x
          , r = t.y
          , n = t.z
          , i = t.w
          , o = s + s
          , a = r + r
          , c = n + n
          , h = s * o
          , l = s * a
          , m = s * c
          , u = r * a
          , y = r * c
          , M = n * c
          , p = i * o
          , k = i * a
          , b = i * c;
        return e[0] = 1 - (u + M),
        e[1] = l + b,
        e[2] = m - k,
        e[3] = l - b,
        e[4] = 1 - (h + M),
        e[5] = y + p,
        e[6] = m + k,
        e[7] = y - p,
        e[8] = 1 - (h + u),
        this
    }
    fromArray(t) {
        for (let e = 0; e < 9; e++)
            this.elements[e] = t[e];
        return this
    }
    toArray() {
        const t = []
          , e = this.elements;
        return t[0] = e[0],
        t[1] = e[1],
        t[2] = e[2],
        t[3] = e[3],
        t[4] = e[4],
        t[5] = e[5],
        t[6] = e[6],
        t[7] = e[7],
        t[8] = e[8],
        t
    }
    clone() {
        return (new this.constructor).fromArray(this.elements)
    }
}

class Matrix4 {
    constructor() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }
    set(t, e, s, r, n, i, o, l, h, c, m, a, u, x, y, p) {
        const z = this.elements;
        return z[0] = t,
        z[4] = e,
        z[8] = s,
        z[12] = r,
        z[1] = n,
        z[5] = i,
        z[9] = o,
        z[13] = l,
        z[2] = h,
        z[6] = c,
        z[10] = m,
        z[14] = a,
        z[3] = u,
        z[7] = x,
        z[11] = y,
        z[15] = p,
        this
    }
    identity() {
        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
        this
    }
    multiply(t) {
        return this.multiplyMatrices(this, t)
    }
    premultiply(t) {
        return this.multiplyMatrices(t, this)
    }
    multiplyMatrices(t, e) {
        const s = t.elements
          , r = e.elements
          , n = this.elements
          , i = s[0]
          , o = s[4]
          , l = s[8]
          , h = s[12]
          , c = s[1]
          , m = s[5]
          , a = s[9]
          , u = s[13]
          , x = s[2]
          , y = s[6]
          , p = s[10]
          , z = s[14]
          , M = s[3]
          , f = s[7]
          , A = s[11]
          , w = s[15]
          , P = r[0]
          , V = r[4]
          , b = r[8]
          , d = r[12]
          , g = r[1]
          , R = r[5]
          , k = r[9]
          , v = r[13]
          , S = r[2]
          , j = r[6]
          , q = r[10]
          , B = r[14]
          , C = r[3]
          , D = r[7]
          , E = r[11]
          , F = r[15];
        return n[0] = i * P + o * g + l * S + h * C,
        n[4] = i * V + o * R + l * j + h * D,
        n[8] = i * b + o * k + l * q + h * E,
        n[12] = i * d + o * v + l * B + h * F,
        n[1] = c * P + m * g + a * S + u * C,
        n[5] = c * V + m * R + a * j + u * D,
        n[9] = c * b + m * k + a * q + u * E,
        n[13] = c * d + m * v + a * B + u * F,
        n[2] = x * P + y * g + p * S + z * C,
        n[6] = x * V + y * R + p * j + z * D,
        n[10] = x * b + y * k + p * q + z * E,
        n[14] = x * d + y * v + p * B + z * F,
        n[3] = M * P + f * g + A * S + w * C,
        n[7] = M * V + f * R + A * j + w * D,
        n[11] = M * b + f * k + A * q + w * E,
        n[15] = M * d + f * v + A * B + w * F,
        this
    }
    multiplyScalar(t) {
        const e = this.elements;
        return e[0] *= t,
        e[4] *= t,
        e[8] *= t,
        e[12] *= t,
        e[1] *= t,
        e[5] *= t,
        e[9] *= t,
        e[13] *= t,
        e[2] *= t,
        e[6] *= t,
        e[10] *= t,
        e[14] *= t,
        e[3] *= t,
        e[7] *= t,
        e[11] *= t,
        e[15] *= t,
        this
    }
    determinant() {
        const t = this.elements
          , e = t[0]
          , s = t[4]
          , r = t[8]
          , n = t[12]
          , i = t[1]
          , o = t[5]
          , l = t[9]
          , h = t[13]
          , c = t[2]
          , m = t[6]
          , a = t[10]
          , u = t[14];
        return t[3] * (+n * l * m - r * h * m - n * o * a + s * h * a + r * o * u - s * l * u) + t[7] * (+e * l * u - e * h * a + n * i * a - r * i * u + r * h * c - n * l * c) + t[11] * (+e * h * m - e * o * u - n * i * m + s * i * u + n * o * c - s * h * c) + t[15] * (-r * o * c - e * l * m + e * o * a + r * i * m - s * i * a + s * l * c)
    }
    invert() {
        const t = this.elements
          , e = t[0]
          , s = t[1]
          , r = t[2]
          , n = t[3]
          , i = t[4]
          , o = t[5]
          , l = t[6]
          , h = t[7]
          , c = t[8]
          , m = t[9]
          , a = t[10]
          , u = t[11]
          , x = t[12]
          , y = t[13]
          , p = t[14]
          , z = t[15]
          , M = m * p * h - y * a * h + y * l * u - o * p * u - m * l * z + o * a * z
          , f = x * a * h - c * p * h - x * l * u + i * p * u + c * l * z - i * a * z
          , A = c * y * h - x * m * h + x * o * u - i * y * u - c * o * z + i * m * z
          , w = x * m * l - c * y * l - x * o * a + i * y * a + c * o * p - i * m * p
          , P = e * M + s * f + r * A + n * w;
        if (0 === P)
            return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const V = 1 / P;
        return t[0] = M * V,
        t[1] = (y * a * n - m * p * n - y * r * u + s * p * u + m * r * z - s * a * z) * V,
        t[2] = (o * p * n - y * l * n + y * r * h - s * p * h - o * r * z + s * l * z) * V,
        t[3] = (m * l * n - o * a * n - m * r * h + s * a * h + o * r * u - s * l * u) * V,
        t[4] = f * V,
        t[5] = (c * p * n - x * a * n + x * r * u - e * p * u - c * r * z + e * a * z) * V,
        t[6] = (x * l * n - i * p * n - x * r * h + e * p * h + i * r * z - e * l * z) * V,
        t[7] = (i * a * n - c * l * n + c * r * h - e * a * h - i * r * u + e * l * u) * V,
        t[8] = A * V,
        t[9] = (x * m * n - c * y * n - x * s * u + e * y * u + c * s * z - e * m * z) * V,
        t[10] = (i * y * n - x * o * n + x * s * h - e * y * h - i * s * z + e * o * z) * V,
        t[11] = (c * o * n - i * m * n - c * s * h + e * m * h + i * s * u - e * o * u) * V,
        t[12] = w * V,
        t[13] = (c * y * r - x * m * r + x * s * a - e * y * a - c * s * p + e * m * p) * V,
        t[14] = (x * o * r - i * y * r - x * s * l + e * y * l + i * s * p - e * o * p) * V,
        t[15] = (i * m * r - c * o * r + c * s * l - e * m * l - i * s * a + e * o * a) * V,
        this
    }
    transpose() {
        const t = this.elements;
        let e;
        return e = t[1],
        t[1] = t[4],
        t[4] = e,
        e = t[2],
        t[2] = t[8],
        t[8] = e,
        e = t[6],
        t[6] = t[9],
        t[9] = e,
        e = t[3],
        t[3] = t[12],
        t[12] = e,
        e = t[7],
        t[7] = t[13],
        t[13] = e,
        e = t[11],
        t[11] = t[14],
        t[14] = e,
        this
    }
    setPosition(t) {
        const e = this.elements;
        return e[12] = t.x,
        e[13] = t.y,
        e[14] = t.z,
        this
    }
    scalePosition(t) {
        let e = this.elements;
        return e[12] *= t.x,
        e[13] *= t.y,
        e[14] *= t.z,
        this
    }
    setRotation(t) {
        const e = this.elements
          , s = t.elements;
        return e[0] = s[0],
        e[1] = s[1],
        e[2] = s[2],
        e[4] = s[3],
        e[5] = s[4],
        e[6] = s[5],
        e[8] = s[6],
        e[9] = s[7],
        e[10] = s[8],
        this
    }
    extractPosition() {
        const t = this.elements;
        return new Vector3(t[12],t[13],t[14])
    }
    extractRotation() {
        const t = this.elements;
        return (new Matrix3).set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10])
    }
    lookAt(t, e, s) {
        const r = this.elements
          , n = t.clone().sub(e);
        0 === n.length() && (n.z = 1),
        n.normalize();
        let i = s.clone().cross(n);
        0 === i.length() && (1 === Math.abs(s.z) ? n.x += 1e-4 : n.z += 1e-4,
        n.normalize(),
        i = s.clone().cross(n)),
        i.normalize();
        const o = n.clone().cross(i);
        return r[0] = i.x,
        r[4] = o.x,
        r[8] = n.x,
        r[1] = i.y,
        r[5] = o.y,
        r[9] = n.y,
        r[2] = i.z,
        r[6] = o.z,
        r[10] = n.z,
        this
    }
    fromArray(t) {
        for (let e = 0; e < 16; e++)
            this.elements[e] = t[e];
        return this
    }
    toArray() {
        const t = []
          , e = this.elements;
        return t[0] = e[0],
        t[1] = e[1],
        t[2] = e[2],
        t[3] = e[3],
        t[4] = e[4],
        t[5] = e[5],
        t[6] = e[6],
        t[7] = e[7],
        t[8] = e[8],
        t[9] = e[9],
        t[10] = e[10],
        t[11] = e[11],
        t[12] = e[12],
        t[13] = e[13],
        t[14] = e[14],
        t[15] = e[15],
        t
    }
    clone() {
        return (new Matrix4).fromArray(this.elements)
    }
}

class Vector2 {
    constructor(t=0, s=0) {
        this.x = t,
        this.y = s;
    }
    add(t) {
        return this.x += t.x,
        this.y += t.y,
        this
    }
    addScalar(t) {
        return this.x += t,
        this.y += t,
        this
    }
    sub(t) {
        return this.x -= t.x,
        this.y -= t.y,
        this
    }
    subScalar(t) {
        return this.x -= t,
        this.y -= t,
        this
    }
    multiply(t) {
        return this.x *= t.x,
        this.y *= t.y,
        this
    }
    multiplyScalar(t) {
        return this.x *= t,
        this.y *= t,
        this
    }
    divide(t) {
        return this.x /= t.x,
        this.y /= t.y,
        this
    }
    divideScalar(t) {
        return this.x /= t,
        this.y /= t,
        this
    }
    dot(t) {
        return this.x * t.x + this.y * t.y
    }
    cross(t) {
        return this.x * t.y - this.y * t.x
    }
    clone() {
        return new this.constructor(this.x,this.y)
    }
}

function clamp(n, a, r) {
    return Math.max(a, Math.min(r, n))
}
function degToRad(n) {
    return .01745329252 * n
}
function radToDeg(n) {
    return 57.2957795131 * n
}

class Euler {
    constructor(t=0, a=0, h=0, s="XYZ") {
        this.x = t,
        this.y = a,
        this.z = h,
        this.order = s;
    }
    setFromQuaternion(t, a) {
        const h = (new Matrix3).makeRotationFromQuaternion(t);
        return this.setFromRotationMatrix(h, a)
    }
    setFromRotationMatrix(t, a) {
        const h = t.elements
          , s = h[0]
          , i = h[3]
          , n = h[6]
          , r = h[1]
          , M = h[4]
          , e = h[7]
          , o = h[2]
          , c = h[5]
          , x = h[8];
        switch (a = a || this.order) {
        case "XYZ":
            this.y = Math.asin(clamp(n, -1, 1)),
            Math.abs(n) < .9999999 ? (this.x = Math.atan2(-e, x),
            this.z = Math.atan2(-i, s)) : (this.x = Math.atan2(c, M),
            this.z = 0);
            break;
        case "YXZ":
            this.x = Math.asin(-clamp(e, -1, 1)),
            Math.abs(e) < .9999999 ? (this.y = Math.atan2(n, x),
            this.z = Math.atan2(r, M)) : (this.y = Math.atan2(-o, s),
            this.z = 0);
            break;
        case "ZXY":
            this.x = Math.asin(clamp(c, -1, 1)),
            Math.abs(c) < .9999999 ? (this.y = Math.atan2(-o, x),
            this.z = Math.atan2(-i, M)) : (this.y = 0,
            this.z = Math.atan2(r, s));
            break;
        case "ZYX":
            this.y = Math.asin(-clamp(o, -1, 1)),
            Math.abs(o) < .9999999 ? (this.x = Math.atan2(c, x),
            this.z = Math.atan2(r, s)) : (this.x = 0,
            this.z = Math.atan2(-i, M));
            break;
        case "YZX":
            this.z = Math.asin(clamp(r, -1, 1)),
            Math.abs(r) < .9999999 ? (this.x = Math.atan2(-e, M),
            this.y = Math.atan2(-o, s)) : (this.x = 0,
            this.y = Math.atan2(n, x));
            break;
        case "XZY":
            this.z = Math.asin(-clamp(i, -1, 1)),
            Math.abs(i) < .9999999 ? (this.x = Math.atan2(c, M),
            this.y = Math.atan2(n, s)) : (this.x = Math.atan2(-e, x),
            this.y = 0);
        }
        return this.order = a,
        this
    }
    clone() {
        return new this.constructor(this.x,this.y,this.z,this.order)
    }
}

class Quaternion {
    constructor(t=0, s=0, i=0, h=1) {
        this.x = t,
        this.y = s,
        this.z = i,
        this.w = h;
    }
    setFromEuler(t) {
        const s = t.x
          , i = t.y
          , h = t.z
          , e = t.order
          , r = Math.cos
          , n = Math.sin
          , o = r(s / 2)
          , a = r(i / 2)
          , y = r(h / 2)
          , c = n(s / 2)
          , x = n(i / 2)
          , u = n(h / 2);
        switch (e) {
        case "XYZ":
            this.x = c * a * y + o * x * u,
            this.y = o * x * y - c * a * u,
            this.z = o * a * u + c * x * y,
            this.w = o * a * y - c * x * u;
            break;
        case "YXZ":
            this.x = c * a * y + o * x * u,
            this.y = o * x * y - c * a * u,
            this.z = o * a * u - c * x * y,
            this.w = o * a * y + c * x * u;
            break;
        case "ZXY":
            this.x = c * a * y - o * x * u,
            this.y = o * x * y + c * a * u,
            this.z = o * a * u + c * x * y,
            this.w = o * a * y - c * x * u;
            break;
        case "ZYX":
            this.x = c * a * y - o * x * u,
            this.y = o * x * y + c * a * u,
            this.z = o * a * u - c * x * y,
            this.w = o * a * y + c * x * u;
            break;
        case "YZX":
            this.x = c * a * y + o * x * u,
            this.y = o * x * y + c * a * u,
            this.z = o * a * u - c * x * y,
            this.w = o * a * y - c * x * u;
            break;
        case "XZY":
            this.x = c * a * y - o * x * u,
            this.y = o * x * y - c * a * u,
            this.z = o * a * u + c * x * y,
            this.w = o * a * y + c * x * u;
        }
        return this
    }
    setFromAxisAngle(t, s) {
        const i = s / 2
          , h = Math.sin(i);
        return this.x = t.x * h,
        this.y = t.y * h,
        this.z = t.z * h,
        this.w = Math.cos(i),
        this
    }
    setFromRotationMatrix(t) {
        const s = t.elements
          , i = s[0]
          , h = s[4]
          , e = s[8]
          , r = s[1]
          , n = s[5]
          , o = s[9]
          , a = s[2]
          , y = s[6]
          , c = s[10]
          , x = i + n + c;
        if (x > 0) {
            const t = .5 / Math.sqrt(x + 1);
            this.w = .25 / t,
            this.x = (y - o) * t,
            this.y = (e - a) * t,
            this.z = (r - h) * t;
        } else if (i > n && i > c) {
            const t = 2 * Math.sqrt(1 + i - n - c);
            this.w = (y - o) / t,
            this.x = .25 * t,
            this.y = (h + r) / t,
            this.z = (e + a) / t;
        } else if (n > c) {
            const t = 2 * Math.sqrt(1 + n - i - c);
            this.w = (e - a) / t,
            this.x = (h + r) / t,
            this.y = .25 * t,
            this.z = (o + y) / t;
        } else {
            const t = 2 * Math.sqrt(1 + c - i - n);
            this.w = (r - h) / t,
            this.x = (e + a) / t,
            this.y = (o + y) / t,
            this.z = .25 * t;
        }
        return this
    }
    multiply(t) {
        return this.multiplyQuaternions(this, t)
    }
    premultiply(t) {
        return this.multiplyQuaternions(t, this)
    }
    multiplyQuaternions(t, s) {
        const i = t.x
          , h = t.y
          , e = t.z
          , r = t.w
          , n = s.x
          , o = s.y
          , a = s.z
          , y = s.w;
        return this.x = i * y + r * n + h * a - e * o,
        this.y = h * y + r * o + e * n - i * a,
        this.z = e * y + r * a + i * o - h * n,
        this.w = r * y - i * n - h * o - e * a,
        this
    }
    dot(t) {
        return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
    }
    clone() {
        return new this.constructor(this.x,this.y,this.z,this.w)
    }
}

const mat4RotationZ90CCW = (new Matrix4).set(0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
  , mat4RotationZ90CW = (new Matrix4).set(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
  , mat4RotationX90CW = (new Matrix4).set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1)
  , mat3RotationX90CCW = (new Matrix3).set(1, 0, 0, 0, 0, 1, 0, -1, 0)
  , mat3RotationZ90CW = (new Matrix3).set(0, -1, 0, 1, 0, 0, 0, 0, 1);

class NativeManager {
    constructor(t, i, e, a) {
        this.uiManager = t,
        this.deviceManager = i,
        this.workerManager = e,
        this.indexedDBManager = a;
    }
    async init(t, i) {
        try {
            let e = new URL("./onirix_native_sdk.js",import.meta.url)
              , a = await this.indexedDBManager.getFromCacheOrFetch("SDK_1.8.1", e)
              , r = URL.createObjectURL(new Blob([a],{
                type: "text/javascript"
            }));
            const {default: s} = await import(/* webpackIgnore: true, webpackMode: "lazy" */
            r);
            let n, o, h;
            if (this.useVocabulary = i.useVocabulary,
            this.host = i.host ?? "https://studio.onirix.com",
            this.useVocabulary && (n = await this.indexedDBManager.getFromCacheOrFetch("orb.fbow", "https://sdk.onirix.com/common/orb.fbow")),
            i.mode === TrackingMode.Spatial) {
                if (o = await fetch(`${this.host}/api/projects/self/targets/${i.sceneOid}/osf?token=${t}`),
                !o.ok)
                    throw new ReconstructionPendingError(`Could not get Onirix Spatial File. Server responded with ${o.status}`);
                const e = await o.arrayBuffer();
                h = new Uint8Array(e),
                await this.workerManager.createWorkers();
            }
            this.nativeSDK = await s({
                preRun: e=>{
                    i.mode == TrackingMode.Spatial ? e.FS_createDataFile("/", "scene.osf", h, !0, !0, !0) : i.mode === TrackingMode.Image ? (this.useVocabulary && e.FS_createDataFile("/", "orb.fbow", n, !0, !0, !0),
                    e.FS_createPreloadedFile("/", "classifier.otf", `${this.host}/api/projects/self/targets/otf?token=${t}`, !0, !1)) : i.mode === TrackingMode.Surface && this.useVocabulary && e.FS_createDataFile("/", "orb.fbow", n, !0, !0, !0);
                }
            }),
            this.buffer = this.nativeSDK._malloc(1228800),
            this.imageBuffer = this.nativeSDK._malloc(1228800),
            this.imuAccData = this.nativeSDK._malloc(32),
            this.imuRotData = this.nativeSDK._malloc(72),
            this.cameraParamsStruct = this.nativeSDK._malloc(40),
            this.frameLayoutStruct = this.nativeSDK._malloc(28),
            this.nativeSDK.HEAPU32[this.cameraParamsStruct / 4 + 0] = 640,
            this.nativeSDK.HEAPU32[this.cameraParamsStruct / 4 + 1] = 480,
            this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 1] = 468,
            this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 2] = 468,
            this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 3] = 320,
            this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 4] = 240,
            i.debug && this.nativeSDK._OX_SetLogCallback(this.nativeSDK.addFunction((t=>{
                console.log(this.nativeSDK.UTF8ToString(t));
            }
            ), "vi"));
        } catch (t) {
            throw console.log(t),
            t instanceof ReconstructionPendingError ? t : new InternalError(t)
        }
        await this.checkLicense(t);
    }
    getIntrinsics() {
        return [this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 2], this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 3], this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 4]]
    }
    setIntrinsics(t, i, e) {
        this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 1] = t,
        this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 2] = t,
        this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 3] = i,
        this.nativeSDK.HEAPF64[this.cameraParamsStruct / 8 + 4] = e,
        this.nativeSDK._OX_UpdateIntrinsics(t, i, e);
    }
    async checkLicense(t) {
        try {
            const i = this.getStringBuffer(this.host)
              , e = this.getStringBuffer(t)
              , a = this.getStringBuffer(window.location.hostname)
              , r = this.getStringBuffer(this.deviceManager.platform)
              , s = this.getStringBuffer(this.deviceManager.device)
              , n = await new Promise(((t,n)=>{
                this.nativeSDK._OX_SetLicense([i], [e], [a], [r], [s], this.nativeSDK.addFunction(((i,e)=>t({
                    ivl: i,
                    oxError: this.nativeSDK.UTF8ToString(e)
                })), "vii"));
            }
            ));
            if (this.releaseStringBuffer(i),
            this.releaseStringBuffer(e),
            this.releaseStringBuffer(a),
            this.releaseStringBuffer(r),
            this.releaseStringBuffer(s),
            !n.ivl)
                throw new LicenseError("Invalid license",n.oxError)
        } catch (t) {
            throw new LicenseError(t,t.oxError)
        }
    }
    startImageTracking(t, i, e, a, r=!1) {
        if (this.onDetected = t,
        this.onPose = i,
        this.onLost = e,
        this.useVocabulary) {
            const t = this.getStringBuffer("orb.fbow");
            this.nativeSDK._OX_Initialize(this.cameraParamsStruct, [t]),
            this.releaseStringBuffer(t);
        } else
            this.nativeSDK._OX_Initialize(this.cameraParamsStruct, "");
        let s = this.getStringBuffer("classifier.otf");
        this.nativeSDK._OX_LoadImageClassifier([s]),
        this.releaseStringBuffer(s),
        this.nativeSDK._OX_StartImageDetection(2, r ? 1 : a, this.nativeSDK.addFunction((t=>this.onDetected(this.nativeSDK.UTF8ToString(t))), "vi"), this.nativeSDK.addFunction((t=>{
            const i = this.nativeSDK.HEAPF64.subarray(t / 8, t / 8 + 16);
            let e = (new Matrix4).fromArray(i);
            e.multiply(mat4RotationX90CW),
            e.invert(),
            this.uiManager.isPortrait() ? (e.multiply(r ? mat4RotationZ90CW : mat4RotationZ90CCW),
            this.onPose(e.toArray())) : this.onPose(e.toArray());
        }
        ), "vi"), this.nativeSDK.addFunction((t=>this.onLost(this.nativeSDK.UTF8ToString(t))), "vi"));
    }
    startQRCodeTracking(t, i, e) {
        this.onDetected = t,
        this.onPose = i,
        this.onLost = e,
        this.nativeSDK._OX_Initialize(this.cameraParamsStruct, ""),
        this.nativeSDK._OX_StartQRCodeDetection(2, this.nativeSDK.addFunction((t=>this.onDetected(this.nativeSDK.UTF8ToString(t))), "vi"), this.nativeSDK.addFunction((t=>{
            const i = this.nativeSDK.HEAPF64.subarray(t / 8, t / 8 + 16);
            let e = (new Matrix4).fromArray(i);
            e.multiply(mat4RotationX90CW),
            e.invert(),
            this.uiManager.isPortrait() ? (e.multiply(mat4RotationZ90CCW),
            this.onPose(e.toArray())) : this.onPose(e.toArray());
        }
        ), "vi"), this.nativeSDK.addFunction((t=>this.onLost(this.nativeSDK.UTF8ToString(t))), "vi"));
    }
    startSLAM(t, i, e) {
        if (this.onPose = t,
        this.onKeyFrame = i,
        this.onStatusChange = e,
        this.useVocabulary) {
            const t = this.getStringBuffer("orb.fbow");
            this.nativeSDK._OX_Initialize(this.cameraParamsStruct, [t]),
            this.releaseStringBuffer(t);
        } else
            this.nativeSDK._OX_Initialize(this.cameraParamsStruct, "");
        this.nativeSDK._OX_StartSLAM(this.nativeSDK.addFunction((t=>{
            const i = this.nativeSDK.HEAPF64.subarray(t / 8, t / 8 + 16);
            let e = (new Matrix4).fromArray(i);
            e.invert(),
            this.uiManager.isPortrait() ? (e.multiply(mat4RotationZ90CCW),
            this.onPose(e.toArray())) : this.onPose(e.toArray());
        }
        ), "vi"), null != this.onKeyFrame ? this.nativeSDK.addFunction((()=>this.onKeyFrame()), "v") : null, this.nativeSDK.addFunction(((t,i)=>{
            this.onStatusChange([this.nativeSDK.UTF8ToString(t), this.nativeSDK.UTF8ToString(i)]);
        }
        ), "vii"));
    }
    xrRelocation(t) {
        if (this.lastXrPose) {
            let i = (new Matrix4).fromArray(this.lastXrPose)
              , e = (new Matrix4).fromArray(t.elements);
            this.xrTransform = e.multiply(i.invert());
        }
    }
    slamRelocation(t) {
        if (this.lastSlamPose) {
            let i = (new Matrix4).fromArray(this.lastSlamPose)
              , e = (new Matrix4).fromArray(t.elements);
            this.slamTransform = e.multiply(i.invert());
        }
    }
    startSpatialTracking(t, i, e) {
        this.onDetected = t,
        e || (this.onPose = i),
        this.nativeSDK._OX_Initialize(this.cameraParamsStruct, ""),
        this.nativeSDK._OX_StartSpatialTracking(this.nativeSDK.addFunction((t=>{
            e || (this.spatialLocated = !0),
            this.onDetected("");
        }
        ), "vi"), this.nativeSDK.addFunction((t=>{
            const i = this.nativeSDK.HEAPF64.subarray(t / 8, t / 8 + 16);
            let a = (new Matrix4).fromArray(i);
            a.invert(),
            this.uiManager.isPortrait() && a.multiply(e ? mat4RotationZ90CW : mat4RotationZ90CCW),
            e ? (this.xrRelocation(a),
            this.onDetected("")) : this.onPose(a.toArray());
        }
        ), "vi"), !e);
        let a = this.getStringBuffer("scene.osf");
        this.nativeSDK._OX_LoadOSF(a),
        this.releaseStringBuffer(a);
    }
    processFrame(t, i=null, e=480, a=640, r=0, s=0) {
        let n = i || this.buffer;
        this.nativeSDK.HEAPU8.set(t, n),
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 0] = a,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 1] = e,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 2] = 4 * a,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 3] = !1,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 4] = 5,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 5] = s,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 6] = r,
        this.nativeSDK._OX_ProcessFrame(n, this.frameLayoutStruct);
    }
    loadExtractionData(t, i=-1) {
        return this.siftBuffer && this.netvladBuffer ? (this.nativeSDK.HEAPF32.set(t.extraction, this.siftBuffer / 4),
        this.nativeSDK.HEAPF32.set(t.descriptor, this.netvladBuffer / 4),
        this.nativeSDK._OX_LoadExtractionData(this.siftBuffer, this.netvladBuffer, i)) : 0
    }
    getCandidateData(t) {
        let i = this.nativeSDK._OX_GetCandidateData(t)
          , e = [];
        for (let t = 0; t < 55e4; t++)
            e.push(this.nativeSDK.HEAPF32[i / 4 + t]);
        return new Float32Array(e)
    }
    loadMatch(t) {
        this.matchBuffer && (this.nativeSDK.HEAPF32.set(t, this.matchBuffer / 4),
        this.nativeSDK._OX_LoadMatch(this.matchBuffer));
    }
    spatialLocate() {
        this.nativeSDK._OX_SpatialLocate();
    }
    loadKeyframePose(t) {
        this.nativeSDK._OX_LoadKfPose(t);
    }
    numSLAMKeyframes() {
        return this.nativeSDK._OX_GetSLAMNumKfs()
    }
    getSLAMKeyframe(t) {
        let i = this.nativeSDK._OX_GetSLAMKf(t)
          , e = [];
        for (let t = 0; t < 1228800; t++)
            e.push(this.nativeSDK.HEAPU8[i + t]);
        return new Uint8Array(e)
    }
    stopImageTracking() {
        this.nativeSDK._OX_StopImageDetection();
    }
    stopQRCodeTracking() {
        this.nativeSDK._OX_StopQRCodeDetection();
    }
    stopSLAM() {
        this.nativeSDK._OX_StopSLAM();
    }
    stopSLAM() {
        this.nativeSDK._OX_StopSLAM();
    }
    addImage(t, i) {
        this.nativeSDK.HEAPU8.set(i, this.imageBuffer),
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 0] = 640,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 1] = 480,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 2] = 2560,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 3] = !1,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 4] = 5,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 5] = 0,
        this.nativeSDK.HEAPU32[this.frameLayoutStruct / 4 + 6] = 0;
        const e = this.getStringBuffer(t);
        this.nativeSDK._OX_AddImage([e], this.imageBuffer, this.frameLayoutStruct),
        this.releaseStringBuffer(e);
    }
    destroy() {
        this.nativeSDK._OX_Destroy();
    }
    extractionType() {
        return this.nativeSDK._OX_ExtractionType()
    }
    getStringBuffer(t) {
        const i = this.nativeSDK.lengthBytesUTF8(t) + 1;
        let e = this.nativeSDK._malloc(i);
        return this.nativeSDK.stringToUTF8(t, e, i),
        e
    }
    releaseStringBuffer(t) {
        this.nativeSDK._free(t);
    }
    getSLAMMap() {
        const t = this.nativeSDK.UTF8ToString(this.nativeSDK._OX_GetSLAMMap());
        let i;
        try {
            i = JSON.parse(t);
        } catch (i) {
            console.error(`Could not parse ${t}`);
        }
        return i
    }
    getSLAMTrackingPoints() {
        const t = this.nativeSDK.UTF8ToString(this.nativeSDK._OX_GetSLAMTrackingPoints());
        let i;
        try {
            i = JSON.parse(t);
        } catch (i) {
            console.error(`Could not parse ${t}`);
        }
        return i
    }
    raycast(t, i, e, a, r, s) {
        const n = this.nativeSDK.UTF8ToString(this.nativeSDK._OX_Raycast(t, i, e, a, r, s));
        let o;
        try {
            o = JSON.parse(n);
        } catch (t) {
            console.error(`Could not parse ${n}`);
        }
        return o
    }
}

class UIManager {
    constructor() {
        this.onFocus = this.onFocus.bind(this);
    }
    createRenderCanvas() {
        this.renderCanvas = document.createElement("canvas"),
        this.renderCanvas.id = "renderer",
        this.renderCanvas.style.position = "absolute",
        document.body.prepend(this.renderCanvas),
        this.addTouchListeners();
    }
    setRenderCanvas(e) {
        this.renderCanvas = e,
        this.addTouchListeners();
    }
    addTouchListeners() {
        this.renderCanvas.addEventListener("click", (e=>{
            this.onCanvasTouch(e);
        }
        )),
        this.renderCanvas.addEventListener("touchstart", (e=>{
            this.onCanvasTouchStart(e);
        }
        )),
        this.renderCanvas.addEventListener("touchmove", (e=>{
            this.onCanvasTouchMove(e);
        }
        )),
        this.renderCanvas.addEventListener("touchend", (e=>{
            this.onCanvasTouchEnd(e);
        }
        ));
    }
    removeRenderCanvas() {
        this.renderCanvas && (this.renderCanvas.remove(),
        this.renderCanvas = null);
    }
    createVideoElement(e, t, i) {
        let o = document.createElement("video");
        o.setAttribute("playsinline", "true"),
        o.setAttribute("autoplay", "true"),
        o.setAttribute("muted", ""),
        this.videoCanvas = document.createElement("canvas"),
        this.videoCanvas.width = t,
        this.videoCanvas.height = i,
        this.videoContext = this.videoCanvas.getContext("2d"),
        o.srcObject = e,
        document.body.appendChild(o),
        this.videoElement = o;
        const s = this.videoElement.srcObject.getVideoTracks()[0].getSettings();
        this.videoSizeHorizontal = [Math.max(s.width, s.height), Math.min(s.width, s.height)],
        this.videoSizeVertical = [Math.min(s.width, s.height), Math.max(s.width, s.height)],
        window.addEventListener("focus", this.onFocus);
    }
    onFocus() {
        this.videoElement.play();
    }
    removeVideoElement() {
        this.videoElement && (window.removeEventListener("focus", this.onFocus),
        this.videoElement.remove(),
        this.videoElement = null);
    }
    fitVideoToScreen() {
        this.videoSize = window.innerWidth > window.innerHeight ? this.videoSizeHorizontal : this.videoSizeVertical;
        let e = []
          , t = [];
        this.videoSize[0] / this.videoSize[1] > window.innerWidth / window.innerHeight ? (t = [Math.floor(this.videoSize[0] * (window.innerHeight / this.videoSize[1])), window.innerHeight],
        e = [-(t[0] - window.innerWidth) / 2, 0]) : (t = [window.innerWidth, Math.floor(this.videoSize[1] * (window.innerWidth / this.videoSize[0]))],
        e = [0, -(t[1] - window.innerHeight) / 2]),
        document.body.style.setProperty("overflow", "hidden"),
        this.videoElement.width = t[0],
        this.videoElement.height = t[1],
        this.videoElement.style.setProperty("position", "fixed"),
        this.videoElement.style.setProperty("z-index", "-1"),
        this.videoElement.style.setProperty("width", `${t[0]}px`),
        this.videoElement.style.setProperty("height", `${t[1]}px`),
        this.videoElement.style.setProperty("left", `${e[0]}px`),
        this.videoElement.style.setProperty("top", `${e[1]}px`),
        this.videoElement.style.setProperty("touch-action", "none"),
        this.renderCanvas.width = t[0],
        this.renderCanvas.height = t[1],
        this.renderCanvas.style.setProperty("position", "fixed", "important"),
        this.renderCanvas.style.setProperty("width", `${t[0]}px`, "important"),
        this.renderCanvas.style.setProperty("height", `${t[1]}px`, "important"),
        this.renderCanvas.style.setProperty("left", `${e[0]}px`, "important"),
        this.renderCanvas.style.setProperty("top", `${e[1]}px`, "important"),
        this.renderCanvas.style.setProperty("touch-action", "none", "important");
    }
    async displayPermissionsDialog(e) {
        return new Promise(((t,i)=>{
            let o, s, n, r;
            o = document.createElement("div"),
            o.id = "ox-permissions-dialog",
            o.style.setProperty("position", "fixed"),
            o.style.setProperty("z-index", "999999"),
            o.style.setProperty("max-width", "360px"),
            o.style.setProperty("width", "calc(100% - 140px"),
            o.style.setProperty("left", "50vw"),
            o.style.setProperty("top", "50vh"),
            o.style.setProperty("transform", "translate(-50%, -50%)"),
            o.style.setProperty("background-color", "#FFFFFF"),
            o.style.setProperty("border-radius", "10px"),
            o.style.setProperty("font-family", "'Open Sans', Arial, sans-serif"),
            o.style.setProperty("text-align", "center"),
            o.style.setProperty("padding", "30px"),
            document.body.appendChild(o),
            s = document.createElement("h1"),
            s.id = "ox-permissions-dialog-title",
            s.innerText = "Access to motion sensors required",
            s.style.setProperty("font-size", "20px"),
            o.appendChild(s),
            n = document.createElement("span"),
            n.id = "ox-permissions-dialog-message",
            n.innerText = "This augmented reality experience requires access to your phone motion sensors. The browser may ask you for permissions.",
            n.style.setProperty("display", "block"),
            n.style.setProperty("padding", "10px 0"),
            o.appendChild(n),
            r = document.createElement("button"),
            r.id = "ox-permissions-dialog-ok-button",
            r.innerText = "Okay!",
            r.style.setProperty("display", "block"),
            r.style.setProperty("margin", "auto"),
            r.style.setProperty("background", "#000000"),
            r.style.setProperty("color", "#FFFFFF"),
            r.style.setProperty("border", "none"),
            r.style.setProperty("border-radius", "12px"),
            r.style.setProperty("padding", "20px 0"),
            r.style.setProperty("width", "100%"),
            r.style.setProperty("font-size", "18px"),
            r.style.setProperty("font-weight", "bold"),
            r.style.setProperty("margin-top", "20px"),
            r.style.setProperty("background-image", "linear-gradient(to left, #f6414b, #ee0979)"),
            o.appendChild(r),
            r.addEventListener("click", (async s=>{
                s.stopPropagation(),
                o.remove();
                try {
                    await e(),
                    t();
                } catch (e) {
                    i(e);
                }
            }
            ));
        }
        ))
    }
    getVideoData() {
        let e;
        if (this.videoElement) {
            if (this.isPortrait()) {
                let[e,i] = this.videoSizeVertical;
                var t = Math.PI / 2;
                this.videoContext.translate(480, 0),
                this.videoContext.rotate(t),
                this.videoContext.drawImage(this.videoElement, 0, 0, i, i, 0, -160, 640, 640),
                this.videoContext.rotate(-t),
                this.videoContext.translate(-480, 0);
            } else
                this.videoContext.drawImage(this.videoElement, 0, 0, 640, 480);
            e = this.videoContext.getImageData(0, 0, 640, 480).data;
        }
        return e
    }
    getVideoElement() {
        return this.videoElement
    }
    getCameraParameters() {
        let e = 640
          , t = 480;
        return this.isPortrait() || ([e,t] = [t, e]),
        {
            fov: radToDeg(2 * Math.atan(e / 936)),
            aspect: t / e
        }
    }
    isPortrait() {
        return window.innerWidth < window.innerHeight
    }
    setTouchListener(e) {
        this.onTouch = e;
    }
    setTouchStartListener(e) {
        this.onTouchStart = e;
    }
    setTouchMoveListener(e) {
        this.onTouchMove = e;
    }
    setTouchEndListener(e) {
        this.onTouchEnd = e;
    }
    getNormalizedTouchCoords(e) {
        const t = new Vector2
          , i = this.renderCanvas.getBoundingClientRect();
        return null != e.clientX ? (t.x = (e.clientX - i.left) / i.width * 2 - 1,
        t.y = -(e.clientY - i.top) / i.height * 2 + 1) : e.touches[0] ? (t.x = e.touches[0].clientX / window.innerWidth * 2 - 1,
        t.y = -e.touches[0].clientY / window.innerHeight * 2 + 1) : (t.x = e.changedTouches[0].clientX / window.innerWidth * 2 - 1,
        t.y = -e.changedTouches[0].clientY / window.innerHeight * 2 + 1),
        t
    }
    onCanvasTouch(e) {
        const t = this.getNormalizedTouchCoords(e);
        this.onTouch && this.onTouch(t);
    }
    onCanvasTouchStart(e) {
        const t = this.getNormalizedTouchCoords(e);
        this.onTouchStart && this.onTouchStart(t);
    }
    onCanvasTouchMove(e) {
        const t = this.getNormalizedTouchCoords(e);
        this.onTouchMove && this.onTouchMove(t);
    }
    onCanvasTouchEnd(e) {
        const t = this.getNormalizedTouchCoords(e);
        this.onTouchEnd && this.onTouchEnd(t);
    }
}

class CameraManager {
    constructor(e, a) {
        this.uiManager = e,
        this.deviceManager = a;
    }
    async startCamera(e, a) {
        try {
            let t, i, r = await navigator.mediaDevices.enumerateDevices();
            if (r = r.filter((e=>"videoinput" === e.kind)),
            a) {
                console.log(`videoinput devices (${navigator.language}):`);
                for (let e of r)
                    console.log(e.label);
            }
            this.deviceManager.os === DeviceManager.OS.iOS && (t = r.find((e=>"back camera" == e.label.toLowerCase())),
            t || (t = r.find((e=>"cámara trasera" == e.label.toLowerCase())))),
            t || (r = r.filter((e=>!e.label.toLowerCase().includes("telephoto"))),
            r = r.filter((e=>!e.label.toLowerCase().includes("wide"))),
            r = r.filter((e=>!e.label.toLowerCase().includes("teleobjetivo"))),
            r = r.filter((e=>!e.label.toLowerCase().includes("angular"))),
            r = r.filter((e=>!e.label.toLowerCase().includes("dual"))),
            r = r.filter((e=>!e.label.toLowerCase().includes("triple"))),
            r = r.filter((e=>!e.label.toLowerCase().includes("front"))),
            t = navigator.brave && navigator.brave.isBrave() ? r[0] : r[r.length - 1]),
            i = e ? {
                facingMode: {
                    exact: "environment"
                },
                width: {
                    min: 640,
                    ideal: 1280,
                    max: 1280
                },
                height: {
                    min: 480,
                    ideal: 960,
                    max: 960
                },
                aspectRatio: {
                    exact: 640 / 480
                }
            } : {
                facingMode: "environment",
                width: 640,
                height: 480
            },
            t && t.deviceId && "" !== t.deviceId && (i.deviceId = {
                exact: t.deviceId
            });
            const o = await navigator.mediaDevices.getUserMedia({
                video: i,
                audio: !1
            });
            let {width: l, height: s} = o.getTracks()[0].getSettings();
            this.stream = o,
            this.uiManager.createVideoElement(this.stream, l, s);
        } catch (e) {
            throw new CameraError(e)
        }
    }
    stopCamera() {
        this.stream && (this.stream.getTracks().forEach((e=>{
            e.stop();
        }
        )),
        this.stream = null,
        this.uiManager.removeVideoElement());
    }
}

class IMUManager {
    constructor(e, t) {
        this.uiManager = e,
        this.deviceManager = t,
        this.started = !1;
    }
    async init(e, t, i) {
        this.onRotation = e,
        this.onAcceleration = t,
        this.onEmulatedHitTest = i;
        const n = async()=>{
            if (this.onDeviceOrientationChange = this.onDeviceOrientationChange.bind(this),
            this.onDeviceMotionChange = this.onDeviceMotionChange.bind(this),
            void 0 !== window.DeviceOrientationEvent && "function" == typeof window.DeviceOrientationEvent.requestPermission) {
                let e;
                try {
                    e = await window.DeviceOrientationEvent.requestPermission();
                } catch (e) {
                    throw new SensorsError("DeviceOrientation API is not supported")
                }
                if ("granted" != e)
                    throw new SensorsError("DeviceOrientation permissions were rejected");
                try {
                    e = await window.DeviceMotionEvent.requestPermission();
                } catch (e) {
                    throw new SensorsError("DeviceMotion API is not supported")
                }
                if ("granted" != e)
                    throw new SensorsError("DeviceMotion permissions were rejected");
                window.addEventListener("deviceorientation", this.onDeviceOrientationChange),
                window.addEventListener("devicemotion", this.onDeviceMotionChange);
            } else
                window.addEventListener("deviceorientation", this.onDeviceOrientationChange),
                window.addEventListener("devicemotion", this.onDeviceMotionChange);
        }
        ;
        this.deviceManager.os === DeviceManager.OS.iOS ? await this.uiManager.displayPermissionsDialog(n) : await n();
    }
    start() {
        this.started = !0;
    }
    stop() {
        this.started = !1;
    }
    destroy() {
        this.stop(),
        window.removeEventListener("deviceorientation", this.onDeviceOrientationChange),
        window.removeEventListener("devicemotion", this.onDeviceMotionChange);
    }
    onDeviceMotionChange(e) {
        this.started && e.acceleration && e.acceleration.x && e.acceleration.y && e.acceleration.z && (this.acceleration = new Vector3(e.acceleration.x,e.acceleration.y,e.acceleration.z),
        this.onAcceleration(this.acceleration));
    }
    onDeviceOrientationChange(e) {
        if (this.started && e.alpha && e.beta && e.gamma) {
            const t = degToRad(e.alpha)
              , i = degToRad(e.beta)
              , n = degToRad(e.gamma);
            let o = new Euler(i,t,-n,"YXZ")
              , a = (new Matrix3).makeRotationFromEuler(o);
            a.multiply(mat3RotationX90CCW);
            const r = degToRad(window.orientation || 0);
            if (0 !== r && a.multiply((new Matrix3).makeRotationFromQuaternion((new Quaternion).setFromAxisAngle(new Vector3(0,0,1), -r))),
            this.rotation = a,
            this.onRotation(this.rotation),
            this.onEmulatedHitTest) {
                const e = this.emulatedHitTest();
                this.onEmulatedHitTest(e);
            }
        }
    }
    emulatedHitTest() {
        const e = new Vector3(0,0,0)
          , t = new Vector3(-this.rotation.elements[6],-this.rotation.elements[7],-this.rotation.elements[8])
          , i = new Vector3(0,1,0)
          , n = new Vector3(0,-1,0)
          , o = t.dot(i);
        if (Math.abs(o) > 1e-6) {
            const a = n.sub(e).dot(i) / o
              , r = e.add(t.multiplyScalar(a))
              , s = (new Matrix4).lookAt(new Vector3(0,-1,0), r, new Vector3(0,1,0));
            return {
                position: r,
                rotation: (new Quaternion).setFromRotationMatrix(s)
            }
        }
        return null
    }
}

class IndexedDBManager {
    constructor(e, r) {
        this.dbName = e,
        this.storeName = r;
    }
    async getFromCacheOrFetch(e, r) {
        let t = null;
        try {
            t = await this.getFileFromIndexedDB(e);
        } catch (e) {
            console.log("An error occurred while trying to get element from indexedDB.");
        }
        return t || (t = await this.fetchAndCacheFile(r, e)),
        new Uint8Array(t)
    }
    async getFileFromIndexedDB(e) {
        return new Promise(((r,t)=>{
            const o = indexedDB.open(this.dbName);
            o.onerror = ()=>t(o.error),
            o.onsuccess = ()=>{
                const s = o.result.transaction(this.storeName, "readonly").objectStore(this.storeName).get(e);
                s.onsuccess = ()=>r(s.result),
                s.onerror = ()=>t(s.error);
            }
            ,
            o.onupgradeneeded = e=>{
                e.target.result.createObjectStore(this.storeName);
            }
            ;
        }
        ))
    }
    async saveFileToIndexedDB(e, r) {
        return new Promise(((t,o)=>{
            const s = indexedDB.open(this.dbName);
            s.onerror = ()=>o(s.error),
            s.onupgradeneeded = e=>{
                e.target.result.createObjectStore(this.storeName);
            }
            ,
            s.onsuccess = ()=>{
                try {
                    const n = s.result.transaction(this.storeName, "readwrite")
                      , a = n.objectStore(this.storeName).put(r, e);
                    a.onsuccess = ()=>t(a.result),
                    a.onerror = ()=>o(a.error);
                } catch (e) {
                    o(e);
                }
            }
            ;
        }
        ))
    }
    async fetchAndCacheFile(e, r) {
        const t = await fetch(e)
          , o = await t.arrayBuffer();
        return await this.saveFileToIndexedDB(r, o),
        o
    }
}

class WorkerExtractionData {
    constructor(l, Z, b, d, G, m, c=5) {
        this.data = l,
        this.width = Z,
        this.height = b,
        this.rotate = d,
        this.flip = G,
        this.colorSpace = c,
        this.dtype = m;
    }
}
class WorkerMatchingData {
    constructor(l, Z, b, d) {
        this.idx = l,
        this.from = Z,
        this.to = b,
        this.dtype = d;
    }
}
class WorkerManager {
    constructor() {
        this.workers = {},
        this.callbacks = {};
        this.indexedDBManager = new IndexedDBManager("onirix-sdk","files");
    }
    workerExists(l) {
        return void 0 !== this.workers[l] && void 0 !== this.callbacks[l]
    }
    createExtractionWorker(l, Z) {
        if (!this.workerExists(l)) {
            let b = atob("")
              , d = new Blob([b],{
                type: "application/javascript"
            });
            this.workers[l] = new Worker(/* webpackIgnore: true, webpackMode: "lazy" */
            URL.createObjectURL(d),{
                type: "module"
            }),
            this.callbacks[l] = Z,
            this.workers[l].addEventListener("message", (Z=>{
                this.callbacks[l](Z.data);
            }
            ));
        }
    }
    createMatchingWorker(l, Z) {
        if (!this.workerExists(l)) {
            let b = atob("")
              , d = new Blob([b],{
                type: "application/javascript"
            });
            this.workers[l] = new Worker(/* webpackIgnore: true, webpackMode: "lazy" */
            URL.createObjectURL(d),{
                type: "module"
            }),
            this.callbacks[l] = Z,
            this.workers[l].addEventListener("message", (Z=>{
                this.callbacks[l](Z.data);
            }
            ));
        }
    }
    replaceCallback(l, Z) {
        this.workerExists(l) && (this.callbacks[l] = Z);
    }
    sendDataToWorker(l, Z) {
        this.workers[l].postMessage(Z);
    }
    async createWorkers() {
        return await this.indexedDBManager.getFromCacheOrFetch("onnx.wasm", new URL("./ort-wasm-simd.wasm",import.meta.url)),
        Promise.all([new Promise(((l,Z)=>{
            this.createExtractionWorker("extraction", (Z=>{
                "ready" === Z && l();
            }
            ));
        }
        )), new Promise(((l,Z)=>{
            this.createMatchingWorker("matching", (Z=>{
                "ready" === Z && l();
            }
            ));
        }
        ))])
    }
}

class WebXRManager {
    constructor(e, t, i, a) {
        this.uiManager = e,
        this.nativeManager = t,
        this.deviceManager = i,
        this.workerManager = a;
    }
    async isWebXRSupported() {
        let e = !1;
        return navigator.xr && (e = await navigator.xr.isSessionSupported("immersive-ar")),
        e
    }
    async init(e, t, i) {
        this.onPose = t,
        this.onSessionEnd = i;
        const a = async()=>{
            const t = ["hit-test"]
              , i = ["dom-overlay"];
            e && i.push("camera-access");
            try {
                const e = await navigator.xr.requestSession("immersive-ar", {
                    requiredFeatures: t,
                    optionalFeatures: i,
                    domOverlay: {
                        root: document.body
                    }
                });
                await this.onXRSessionStarted(e);
            } catch (e) {
                throw console.log(e),
                new SensorsError(`error while initializing webXR API: ${e}`)
            }
        }
        ;
        window.navigator.userAgent.includes("OnirixPlayer") ? await a() : await this.uiManager.displayPermissionsDialog(a);
    }
    startImageDetection() {
        this.usingImageDetection = !0,
        this.detectingImage = !0;
    }
    stopImageDetection() {
        this.detectingImage = !1;
    }
    start() {
        this.started = !0,
        this.usingSpatial && (this.relocating = !1,
        this.workerManager.replaceCallback("extraction", (e=>{
            if (!1 === e)
                return void (this.relocating = !1);
            let t = this.nativeManager.loadExtractionData(e);
            this.candidates = Array.from(Array(t).keys()).reverse(),
            this.siftData = e.extraction,
            this.matchKeyframes();
        }
        )),
        this.workerManager.replaceCallback("matching", (e=>{
            this.nativeManager.loadMatch(e),
            this.matchKeyframes();
        }
        )));
    }
    matchKeyframes() {
        if (this.candidates.length > 0) {
            let e = this.candidates.pop();
            this.workerManager.sendDataToWorker("matching", new WorkerMatchingData(e,this.siftData,this.nativeManager.getCandidateData(e),this.nativeManager.extractionType()));
        } else
            this.nativeManager.spatialLocate(),
            this.relocating = !1;
    }
    async destroy() {
        this.xrSession && (await this.xrSession.end(),
        this.xrSession = null,
        this.xrLastPose = null);
    }
    async onXRSessionStarted(e) {
        let t = this.uiManager.renderCanvas.getContext("webgl2");
        t || (t = this.uiManager.renderCanvas.getContext("webgl")),
        t.getContextAttributes().xrCompatible || await t.makeXRCompatible(),
        this.xrContext = t,
        this.framebuffer = this.xrContext.createFramebuffer(),
        this.xrLayer = new XRWebGLLayer(e,this.xrContext),
        this.usingSpatial ? (navigator.userAgent.includes("OnirixPlayer") || (this.glBinding = new XRWebGLBinding(e,this.xrContext)),
        this.nativeManager.siftBuffer = this.nativeManager.nativeSDK._malloc(22e5),
        this.nativeManager.matchBuffer = this.nativeManager.nativeSDK._malloc(14e3),
        this.nativeManager.netvladBuffer = this.nativeManager.nativeSDK._malloc(32768)) : this.detectingImage && (navigator.userAgent.includes("OnirixPlayer") || (this.glBinding = new XRWebGLBinding(e,this.xrContext))),
        e.updateRenderState({
            baseLayer: this.xrLayer
        }),
        this.xrLocalRefSpace = await e.requestReferenceSpace("local"),
        this.xrViewerRefSpace = await e.requestReferenceSpace("viewer"),
        this.xrHitTestSource = await e.requestHitTestSource({
            space: this.xrViewerRefSpace
        }),
        e.requestAnimationFrame(this.onXRFrame.bind(this)),
        window.navigator.userAgent.includes("WebXRViewer") ? (this.uiManager.renderCanvas.addEventListener("click", (e=>{
            this.onTouch && this.onTouch(this.getNormalizedTouchCoords(e));
        }
        )),
        this.uiManager.renderCanvas.addEventListener("touchstart", (e=>{
            this.onTouchStart && this.onTouchStart(this.getNormalizedTouchCoords(e));
        }
        )),
        this.uiManager.renderCanvas.addEventListener("touchend", (e=>{
            this.onTouchEnd && this.onTouchEnd(this.getNormalizedTouchCoords(e));
        }
        ))) : (e.addEventListener("select", (e=>{
            this.onTouch && this.onTouch(this.getXRInputCoords(e));
        }
        )),
        e.addEventListener("selectstart", (e=>{
            this.onTouchStart && this.onTouchStart(this.getXRInputCoords(e));
        }
        )),
        e.addEventListener("selectend", (e=>{
            this.onTouchEnd && this.onTouchEnd(this.getXRInputCoords(e));
        }
        ))),
        this.uiManager.renderCanvas.addEventListener("touchmove", (e=>{
            this.onTouchMove && this.onTouchMove(this.getNormalizedTouchCoords(e));
        }
        )),
        e.addEventListener("end", (()=>{
            this.onSessionEnd && this.onSessionEnd();
        }
        )),
        this.xrSession = e;
    }
    hasRelocated() {
        return (this.usingSpatial || this.usingImageDetection) && null != this.nativeManager.xrTransform
    }
    needsRelocation() {
        return this.usingSpatial && !this.hasRelocated() && (null == this.lastRelocationTry || this.msSinceRelocation() > 2500)
    }
    needsImageDetection() {
        return this.detectingImage && (null == this.lastRelocationTry || this.msSinceRelocation() > 200)
    }
    startRelocationTimer() {
        this.lastRelocationTry = new Date;
    }
    msSinceRelocation() {
        let e = new Date;
        return this.lastRelocationTry ? e - this.lastRelocationTry : 0
    }
    resizeTexture(e, t, i, a, r, n) {
        const s = e.createFramebuffer();
        e.bindFramebuffer(e.FRAMEBUFFER, s),
        e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0);
        const o = e.createTexture();
        e.bindTexture(e.TEXTURE_2D, o),
        e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, r, n, 0, e.RGBA, e.UNSIGNED_BYTE, null),
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE),
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE),
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.LINEAR),
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.LINEAR);
        const h = e.createFramebuffer();
        return e.bindFramebuffer(e.FRAMEBUFFER, h),
        e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, o, 0),
        e.bindFramebuffer(e.READ_FRAMEBUFFER, s),
        e.bindFramebuffer(e.DRAW_FRAMEBUFFER, h),
        e.blitFramebuffer(0, 0, i, a, 0, 0, r, n, e.COLOR_BUFFER_BIT, e.LINEAR),
        o
    }
    getCameraIntrinsics(e, t) {
        const i = e
          , a = t.width
          , r = t.height;
        if (this.uiManager.isPortrait()) {
            return [r / 2 * i[5] * Math.min(480 / r, 640 / a), 320, 240]
        }
        return [r / 2 * i[5] * Math.min(640 / r, 480 / a), 320, 240]
    }
    onXRFrame(e, t) {
        let i = t.session;
        i.requestAnimationFrame(this.onXRFrame.bind(this));
        const a = t.getViewerPose(this.xrLocalRefSpace);
        if (a) {
            if (this.needsRelocation() && !this.relocating || this.needsImageDetection()) {
                let e, i, r;
                this.relocating = !0;
                const n = this.xrContext;
                this.nativeManager.lastXrPose = (new Matrix4).fromArray(a.views[0].transform.matrix).toArray(),
                (async()=>{
                    let s, o, h, c, g;
                    if (navigator.userAgent.includes("OnirixPlayer")) {
                        const a = await t.getCameraImage();
                        e = a.width,
                        i = a.height;
                        let[c,g,d] = this.nativeManager.getIntrinsics();
                        Math.abs(c - a.focalLength) > 1 && this.nativeManager.setIntrinsics(a.focalLength, 320, 240);
                        const u = new Image;
                        await new Promise((e=>{
                            u.src = `data:image/jpeg;base64,${a.data}`,
                            u.onload = ()=>{
                                e();
                            }
                            ;
                        }
                        )),
                        s = n.getParameter(n.READ_FRAMEBUFFER_BINDING),
                        o = n.getParameter(n.DRAW_FRAMEBUFFER_BINDING),
                        h = n.getParameter(n.TEXTURE_BINDING_2D);
                        const l = n.createTexture();
                        n.bindTexture(n.TEXTURE_2D, l),
                        n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, u),
                        r = l;
                    } else {
                        s = n.getParameter(n.READ_FRAMEBUFFER_BINDING),
                        o = n.getParameter(n.DRAW_FRAMEBUFFER_BINDING),
                        h = n.getParameter(n.TEXTURE_BINDING_2D);
                        for (const t of a.views)
                            t.camera && (e = t.camera.width,
                            i = t.camera.height,
                            r = this.glBinding.getCameraImage(t.camera));
                        if (!r)
                            return
                    }
                    this.uiManager.isPortrait() ? (c = 640 / i,
                    g = 480 / e) : (c = 480 / i,
                    g = 640 / e);
                    let d, u, l = Math.max(c, g);
                    r = this.resizeTexture(n, r, e, i, e * l, i * l),
                    e *= l,
                    i *= l,
                    this.cameraData || (this.cameraData = new Uint8ClampedArray(e * i * 4)),
                    n.bindTexture(n.TEXTURE_2D, r),
                    n.bindFramebuffer(n.FRAMEBUFFER, this.framebuffer),
                    n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, r, 0),
                    n.readPixels(0, 0, e, i, n.RGBA, n.UNSIGNED_BYTE, this.cameraData),
                    n.bindFramebuffer(n.READ_FRAMEBUFFER, s),
                    n.bindFramebuffer(n.DRAW_FRAMEBUFFER, o),
                    n.bindTexture(n.TEXTURE_2D, h),
                    this.uiManager.isPortrait() ? (d = 1,
                    u = 3) : (d = 2,
                    u = 0),
                    this.usingSpatial && (console.log("Sending data to extraction worker!"),
                    this.workerManager.sendDataToWorker("extraction", new WorkerExtractionData(this.cameraData,e,i,u,d,this.nativeManager.extractionType()))),
                    this.detectingImage && (this.nativeManager.xrbuffer || this.nativeManager.nativeSDK._malloc(e * i * 4),
                    this.nativeManager.processFrame(this.cameraData, this.nativeManager.xrbuffer, i, e, d, u)),
                    this.startRelocationTimer();
                }
                )();
            }
            this.xrContext.bindFramebuffer(this.xrContext.FRAMEBUFFER, i.renderState.baseLayer.framebuffer);
            const e = a.views[0];
            let r = (new Matrix4).fromArray(e.transform.matrix);
            if (this.deviceManager.os === DeviceManager.OS.Android && this.started && this.lastPose && !this.jumpPose) {
                2 * Math.acos(Math.abs((new Quaternion).setFromRotationMatrix(r).dot((new Quaternion).setFromRotationMatrix(this.lastPose)))) > 1 && (this.jumpPose = r);
            }
            if (this.jumpPose) {
                const e = this.jumpPose.clone().invert().multiply(r);
                r = this.lastPose.clone().multiply(e);
            } else
                this.lastPose = r;
            this.hasRelocated() && (r = (new Matrix4).fromArray(this.nativeManager.xrTransform.elements).multiply(r)),
            (!this.usingSpatial && !this.usingImageDetection || this.hasRelocated()) && this.onPose(r.toArray());
            const n = this.xrLayer.getViewport(e)
              , s = n.width
              , o = n.height
              , h = null == this.xrLastPose || this.lastViewportWidth != s || this.lastViewportHeight != o;
            if (this.xrLastPose = a,
            this.lastViewportWidth = s,
            this.lastViewportHeight = o,
            h && this.onResize && this.onResize(),
            this.onHitTestResult) {
                const e = t.getHitTestResults(this.xrHitTestSource);
                if (e.length > 0) {
                    const t = e[0].getPose(this.xrLocalRefSpace)
                      , i = (new Matrix4).fromArray(t.transform.matrix)
                      , a = i.extractPosition()
                      , n = ((new Quaternion).setFromRotationMatrix(i),
                    r.extractPosition())
                      , s = Math.atan2(n.x - a.x, n.z - a.z)
                      , o = {
                        position: a,
                        rotation: (new Quaternion).setFromEuler(new Euler(0,s,0))
                    };
                    this.onHitTestResult(o);
                }
            }
        }
        this.onFrame && this.onFrame(t);
    }
    fitCanvasToXRViewport() {
        if (this.xrLastPose) {
            const e = this.xrLastPose.views[0]
              , t = this.xrLayer.getViewport(e);
            if ((t.width > t.height && window.innerWidth > window.innerHeight || t.width <= t.height && window.innerWidth <= window.innerHeight) && t.width * t.height > window.innerWidth * window.innerHeight)
                this.uiManager.renderCanvas.width = t.width,
                this.uiManager.renderCanvas.height = t.height;
            else {
                this.uiManager.renderCanvas.width = window.innerWidth;
                const e = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sat"), 10) || 0
                  , t = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sab"), 10) || 0
                  , i = window.innerHeight + e + t;
                this.uiManager.renderCanvas.height = i;
            }
        }
    }
    getCameraParameters() {
        let e = 60
          , t = 9 / 16;
        if (this.xrSession && this.xrLastPose) {
            const i = this.xrLastPose.views[0].projectionMatrix;
            t = this.uiManager.renderCanvas.width / this.uiManager.renderCanvas.height,
            e = radToDeg(2 * Math.atan(1 / i[5]));
        }
        return {
            fov: e,
            aspect: t
        }
    }
    getXRLayer() {
        return this.xrLayer
    }
    getXRInputCoords(e) {
        const t = e.inputSource.gamepad.axes;
        return new Vector2(t[0],-t[1])
    }
    getNormalizedTouchCoords(e) {
        const t = new Vector2
          , i = this.uiManager.renderCanvas.getBoundingClientRect();
        return null != e.clientX ? (t.x = (e.clientX - i.left) / i.width * 2 - 1,
        t.y = -(e.clientY - i.top) / i.height * 2 + 1) : e.touches[0] ? (t.x = e.touches[0].clientX / window.innerWidth * 2 - 1,
        t.y = -e.touches[0].clientY / window.innerHeight * 2 + 1) : (t.x = e.changedTouches[0].clientX / window.innerWidth * 2 - 1,
        t.y = -e.changedTouches[0].clientY / window.innerHeight * 2 + 1),
        t
    }
    setResizeListener(e) {
        this.onResize = e;
    }
    setTouchListener(e) {
        this.onTouch = e;
    }
    setTouchStartListener(e) {
        this.onTouchStart = e;
    }
    setTouchMoveListener(e) {
        this.onTouchMove = e;
    }
    setTouchEndListener(e) {
        this.onTouchEnd = e;
    }
    setSessionEndListener(e) {
        this.onSessionEnd = e;
    }
    setHitTestListener(e) {
        this.onHitTestResult = e;
    }
    setFrameListener(e) {
        this.onFrame = e;
    }
}

class EventManager {
    constructor() {
        this.eventListeners = {},
        this.eventListenerCount = 0;
    }
    stop() {
        this.eventListeners = {},
        this.eventListenerCount = 0;
    }
    addEventListener(e, t) {
        this.eventListeners[e] || (this.eventListeners[e] = []);
        const n = this.eventListenerCount++;
        return this.eventListeners[e].push({
            id: n,
            func: t
        }),
        n
    }
    triggerEvent(e, t) {
        this.eventListeners[e] && this.eventListeners[e].map((e=>e.func(t)));
    }
    removeEventListener(e) {
        for (let t of Object.keys(this.eventListeners))
            for (let n = 0; n < t.length; n++)
                if (t[n].id === e) {
                    t.splice(n, 1);
                    break
                }
    }
}

class OnirixSDK {
    constructor(e) {
        this.authToken = e,
        this.deviceManager = new DeviceManager,
        this.indexedDBManager = new IndexedDBManager("onirix-sdk","files"),
        this.uiManager = new UIManager,
        this.workerManager = new WorkerManager,
        this.nativeManager = new NativeManager(this.uiManager,this.deviceManager,this.workerManager,this.indexedDBManager),
        this.cameraManager = new CameraManager(this.uiManager,this.deviceManager),
        this.webXRManager = new WebXRManager(this.uiManager,this.nativeManager,this.deviceManager,this.workerManager),
        this.imuManager = new IMUManager(this.uiManager,this.deviceManager),
        this.eventManager = new EventManager;
    }
    async init(e) {
        this.started = !1,
        e.visualDebug && (this.initVisualDebug(),
        e.debug = !0);
        const t = this.readConfig(e);
        this.mode = t.mode,
        this.imageTrackingMode = t.imageTrackingMode ?? ImageTrackingMode.Image,
        this.debug = t.debug,
        this.markerScale = t.markerScale;
        const a = t.cameraAccess || this.mode == TrackingMode.Spatial || this.mode == TrackingMode.Image && this.imageTrackingMode == ImageTrackingMode.World;
        switch (await this.nativeManager.init(this.authToken, t),
        t.renderCanvas ? (this.uiManager.setRenderCanvas(t.renderCanvas),
        this.usingProvidedCanvas = !0) : (this.uiManager.createRenderCanvas(),
        this.usingProvidedCanvas = !1),
        this.mode) {
        case TrackingMode.Surface:
            const e = await this.webXRManager.isWebXRSupported();
            if (t.disableWorldTracking || !e && !t.disableWebXR && t.disableSLAM)
                this.surfaceMode = SurfaceMode.Gyroscope,
                await this.imuManager.init(this.onRotation.bind(this), this.onAcceleration.bind(this), this.onHitTestResult.bind(this)),
                this.imuManager.start();
            else if (t.disableWebXR || !e)
                this.surfaceMode = SurfaceMode.SLAM,
                await this.imuManager.init(this.onRotation.bind(this), this.onAcceleration.bind(this), this.onHitTestResult.bind(this)),
                this.imuManager.start();
            else
                try {
                    await this.webXRManager.init(a, this.onPose.bind(this), (()=>this.stop())),
                    this.webXRManager.setTouchListener(this.onTouch.bind(this)),
                    this.webXRManager.setTouchStartListener(this.onTouchStart.bind(this)),
                    this.webXRManager.setTouchMoveListener(this.onTouchMove.bind(this)),
                    this.webXRManager.setTouchEndListener(this.onTouchEnd.bind(this)),
                    this.webXRManager.setSessionEndListener(this.onSessionEnd.bind(this)),
                    this.webXRManager.setHitTestListener(this.onHitTestResult.bind(this)),
                    this.webXRManager.setResizeListener(this.onResize.bind(this)),
                    this.webXRManager.setFrameListener(this.onFrame.bind(this)),
                    this.webXRManager.start(),
                    this.surfaceMode = SurfaceMode.WebXR,
                    this.usingWebXR = !0;
                } catch (e) {
                    this.surfaceMode = SurfaceMode.SLAM,
                    await this.imuManager.init(this.onRotation.bind(this), this.onAcceleration.bind(this), this.onHitTestResult.bind(this)),
                    this.imuManager.start();
                }
            break;
        case TrackingMode.Image:
            {
                const e = await this.webXRManager.isWebXRSupported();
                this.imageTrackingMode === ImageTrackingMode.World && e ? (this.webXRManager.startImageDetection(),
                await this.webXRManager.init(a, this.onPose.bind(this), (()=>this.stop())),
                this.webXRManager.setTouchListener(this.onTouch.bind(this)),
                this.webXRManager.setTouchStartListener(this.onTouchStart.bind(this)),
                this.webXRManager.setTouchMoveListener(this.onTouchMove.bind(this)),
                this.webXRManager.setTouchEndListener(this.onTouchEnd.bind(this)),
                this.webXRManager.setSessionEndListener(this.onSessionEnd.bind(this)),
                this.webXRManager.setHitTestListener(this.onHitTestResult.bind(this)),
                this.webXRManager.setResizeListener(this.onResize.bind(this)),
                this.webXRManager.setFrameListener(this.onFrame.bind(this)),
                this.webXRManager.start(),
                this.usingWebXR = !0) : this.imageTrackingMode !== ImageTrackingMode.Image && (await this.imuManager.init(this.onRotation.bind(this), this.onAcceleration.bind(this), this.onHitTestResult.bind(this)),
                this.imuManager.start());
            }
            break;
        case TrackingMode.QRCode:
            break;
        case TrackingMode.Spatial:
            {
                const e = await this.webXRManager.isWebXRSupported();
                t.disableWebXR || !e ? (this.surfaceMode = SurfaceMode.SLAM,
                await this.imuManager.init(this.onRotation.bind(this), this.onAcceleration.bind(this), this.onHitTestResult.bind(this)),
                this.imuManager.start(),
                this.nativeManager.siftBuffer = this.nativeManager.nativeSDK._malloc(22e5),
                this.nativeManager.matchBuffer = this.nativeManager.nativeSDK._malloc(14e3),
                this.nativeManager.netvladBuffer = this.nativeManager.nativeSDK._malloc(32768),
                this.extractingIdx = 1,
                this.workerManager.replaceCallback("extraction", (e=>{
                    let t = this.nativeManager.loadExtractionData(e, this.extractingIdx);
                    this.candidates = Array.from(Array(t).keys()).reverse(),
                    this.siftData = e.extraction,
                    this.matchKeyframes();
                }
                )),
                this.workerManager.replaceCallback("matching", (e=>{
                    this.nativeManager.loadMatch(e),
                    this.matchKeyframes();
                }
                ))) : (this.surfaceMode = SurfaceMode.WebXR,
                this.usingWebXR = !0,
                this.webXRManager.usingSpatial = !0,
                await this.webXRManager.init(a, this.onPose.bind(this), (()=>this.stop())),
                this.webXRManager.setTouchListener(this.onTouch.bind(this)),
                this.webXRManager.setTouchStartListener(this.onTouchStart.bind(this)),
                this.webXRManager.setTouchMoveListener(this.onTouchMove.bind(this)),
                this.webXRManager.setTouchEndListener(this.onTouchEnd.bind(this)),
                this.webXRManager.setSessionEndListener(this.onSessionEnd.bind(this)),
                this.webXRManager.setHitTestListener(this.onHitTestResult.bind(this)),
                this.webXRManager.setResizeListener(this.onResize.bind(this)),
                this.webXRManager.setFrameListener(this.onFrame.bind(this)),
                this.webXRManager.start(),
                this.webXRManager.startRelocationTimer());
            }
        }
        if (!this.usingWebXR) {
            await this.cameraManager.startCamera(t.highResolutionCamera, t.debug),
            this.uiManager.setTouchListener(this.onTouch.bind(this)),
            this.uiManager.setTouchStartListener(this.onTouchStart.bind(this)),
            this.uiManager.setTouchMoveListener(this.onTouchMove.bind(this)),
            this.uiManager.setTouchEndListener(this.onTouchEnd.bind(this)),
            this.frameLoop = !0;
            const e = ()=>{
                this.frameLoop && (this.onFrame(null),
                requestAnimationFrame(e));
            }
            ;
            requestAnimationFrame(e);
        }
        return this.onResize(),
        window.addEventListener("resize", (e=>this.onResize())),
        this.uiManager.renderCanvas
    }
    async start() {
        switch (this.started = !0,
        this.mode) {
        case TrackingMode.Surface:
            switch (this.surfaceMode) {
            case SurfaceMode.Gyroscope:
                this.imuManager.start();
                break;
            case SurfaceMode.SLAM:
                this.nativeManager.startSLAM((e=>{
                    this.onPose(e);
                }
                ), this.debug ? this.onKeyFrame.bind(this) : null, this.onStatusChange.bind(this)),
                this.processLoop();
                break;
            case SurfaceMode.WebXR:
                this.webXRManager.start();
            }
            break;
        case TrackingMode.Image:
            let e;
            this.imageTrackingMode === ImageTrackingMode.World ? e = this.usingWebXR ? this.onXrPose.bind(this) : this.onSLAMPose.bind(this) : this.imageTrackingMode === ImageTrackingMode.Rotation ? e = this.onRotPose.bind(this) : this.imageTrackingMode === ImageTrackingMode.Image && (e = this.onPose.bind(this)),
            this.nativeManager.startImageTracking(this.onDetected.bind(this), e, this.onLost.bind(this), this.imageTrackingMode, this.usingWebXR),
            this.usingWebXR || this.processLoop();
            break;
        case TrackingMode.QRCode:
            this.nativeManager.startQRCodeTracking(this.onDetected.bind(this), this.onPose.bind(this), this.onLost.bind(this)),
            this.processLoop();
            break;
        case TrackingMode.Spatial:
            this.nativeManager.startSpatialTracking(this.onDetected.bind(this), this.onPose.bind(this), this.usingWebXR),
            this.processLoop();
        }
    }
    async stop() {
        switch (this.mode) {
        case TrackingMode.Surface:
            switch (this.surfaceMode) {
            case SurfaceMode.Gyroscope:
                this.imuManager.stop();
                break;
            case SurfaceMode.SLAM:
                this.nativeManager.stopSLAM();
            }
            break;
        case TrackingMode.Image:
            this.nativeManager.stopImageTracking();
            break;
        case TrackingMode.QRCode:
            this.nativeManager.stopQRCodeTracking();
            break;
        case TrackingMode.Spatial:
            this.nativeManager.stopSpatialTracking();
        }
        this.started = !1;
    }
    matchKeyframes() {
        if (this.candidates.length > 0) {
            let e = this.candidates.pop();
            this.workerManager.sendDataToWorker("matching", new WorkerMatchingData(e,this.siftData,this.nativeManager.getCandidateData(e),this.nativeManager.extractionType()));
        } else
            this.nativeManager.loadKeyframePose(this.extractingIdx),
            this.extractingIdx++,
            this.locating = !1;
    }
    async destroy() {
        this.eventManager.stop(),
        this.nativeManager.destroy(),
        this.surfaceMode !== SurfaceMode.WebXR ? this.cameraManager.stopCamera() : this.webXRManager.destroy(),
        this.usingProvidedCanvas || this.uiManager.renderCanvas.remove(),
        this.frameLoop = !1;
    }
    readConfig(e) {
        if (!e)
            throw new InternalError("A config object must be provided.");
        if (!e.mode)
            throw new InternalError("'mode' is a required parameter.");
        if (e.mode <= 0 || e.mode > 4)
            throw new InternalError("Selected mode is not a valid tracking mode.");
        if (e.imageTrackingMode <= 0 || e.imageTrackingMode > 3)
            throw new InternalError("Selected image tracking mode is not valid.");
        return 4 == e.mode && e.sceneOid,
        Object.assign(DefaultConfig, e)
    }
    onCameraFrame() {
        if (this.started) {
            const e = this.uiManager.getVideoData();
            if (e) {
                if (this.mode === TrackingMode.Spatial && !this.locating) {
                    if (this.nativeManager.numSLAMKeyframes() > this.extractingIdx && !this.nativeManager.spatialLocated) {
                        this.locating = !0;
                        let e = this.nativeManager.getSLAMKeyframe(this.extractingIdx);
                        this.workerManager.sendDataToWorker("extraction", new WorkerExtractionData(e,640,480,0,0,this.nativeManager.extractionType()));
                    }
                }
                this.nativeManager.processFrame(e);
            }
            const t = this.uiManager.getVideoElement();
            t && t.requestVideoFrameCallback(this.onCameraFrame.bind(this));
        }
    }
    processLoop() {
        this.onCameraFrame();
    }
    getCameraParameters() {
        return this.usingWebXR ? this.webXRManager.getCameraParameters() : this.uiManager.getCameraParameters()
    }
    getXRLayer() {
        return this.usingWebXR ? this.webXRManager.getXRLayer() : null
    }
    getXRParams() {
        return this.usingWebXR ? {
            xrSession: this.webXRManager.xrSession,
            xrLocalRefSpace: this.webXRManager.xrLocalRefSpace,
            xrViewerRefSpace: this.webXRManager.xrViewerRefSpace
        } : null
    }
    getCameraFeed() {
        return this.uiManager.getVideoElement()
    }
    getSurfaceMode() {
        return this.surfaceMode
    }
    async addImage(e, t) {
        const a = await (i = e,
        new Promise(((e,t)=>{
            const a = new Image;
            a.crossOrigin = "Anonymous",
            a.addEventListener("load", (()=>e(a))),
            a.addEventListener("error", (e=>t(e))),
            a.src = i;
        }
        )));
        var i;
        const n = document.createElement("canvas");
        n.width = 640,
        n.height = 480;
        const s = n.getContext("2d");
        s.drawImage(a, 0, 0);
        const r = s.getImageData(0, 0, 640, 480).data;
        this.nativeManager.addImage(t, r);
    }
    initVisualDebug() {
        let e = document.createElement("div");
        e.style.position = "fixed",
        e.style.top = "1em",
        e.style.left = "1em",
        e.style.padding = "0.5em",
        e.style.width = "75vw",
        e.style.height = "50vh",
        e.style.borderRadius = "0.25em",
        e.style.background = "black",
        e.style.color = "white",
        e.style.opacity = "0.5",
        e.style.fontSize = "0.75em",
        e.style.fontFamily = "monospace, monospace",
        e.style.overflow = "auto",
        e.style.zIndex = 999999,
        e.style.pointerEvents = "none",
        document.body.appendChild(e);
        let t = document.createElement("button");
        t.innerHTML = "Share",
        t.style.position = "fixed",
        t.style.top = "calc(1em + 50vh + 2em)",
        t.style.left = "1em",
        t.style.opacity = "0.5",
        t.style.zIndex = 9999999,
        document.body.appendChild(t);
        const a = (e,t,a)=>{
            const i = console[e];
            console[e] = (...e)=>{
                i.apply(console, e);
                const n = document.createElement("div");
                n.textContent = e.join(" "),
                a && (n.style.color = a),
                t.appendChild(n),
                t.scrollTop = t.scrollHeight;
            }
            ;
        }
        ;
        a("log", e),
        a("info", e),
        a("warn", e, "orange"),
        a("error", e, "red"),
        t.onclick = async()=>{
            await navigator.share({
                text: [...e.children].map((e=>e.innerHTML)).join("\n")
            });
        }
        ;
    }
    onPose(e) {
        this.eventManager.triggerEvent(Events.OnPose, e);
    }
    onRotPose(e) {
        if (!this.firstRotationOffset) {
            this.firstRotationPose = (new Matrix4).fromArray(e);
            let t = this.firstRotationPose.extractRotation();
            this.firstRotationOffset = t.multiply(this.lastRotation.invert());
        }
    }
    onXrPose(e) {
        let t = (new Matrix4).fromArray(e);
        const a = this.markerScale[this.detectedId];
        a ? t = t.scalePosition(new Vector3(a.markerWidth,a.markerWidth,a.markerWidth)) : console.warn("Marker scale for id", this.detectedId, "was not provided"),
        this.nativeManager.xrRelocation(t);
    }
    onSLAMPose(e) {
        let t = (new Matrix4).fromArray(e);
        const a = this.markerScale[this.detectedId];
        a ? (t = t.scalePosition(new Vector3(a.markerWidth,a.markerWidth,a.markerWidth)),
        e = t.toArray()) : console.warn("Marker scale for id", this.detectedId, "was not provided"),
        this.eventManager.triggerEvent(Events.OnPose, e);
    }
    onKeyFrame() {
        this.eventManager.triggerEvent(Events.OnKeyFrame);
    }
    onStatusChange(e) {
        this.eventManager.triggerEvent(Events.OnStatusChange, e);
    }
    onDetected(e) {
        this.hasDetectedOnce = !0,
        this.detectedId = e,
        this.usingWebXR && this.webXRManager.stopImageDetection(),
        this.eventManager.triggerEvent(Events.OnDetected, e);
    }
    onLost(e) {
        this.eventManager.triggerEvent(Events.OnLost, e);
    }
    onResize() {
        this.usingWebXR ? this.webXRManager.fitCanvasToXRViewport() : this.uiManager.fitVideoToScreen(),
        this.eventManager.triggerEvent(Events.OnResize);
    }
    onTouch(e) {
        this.eventManager.triggerEvent(Events.OnTouch, e);
    }
    onTouchStart(e) {
        this.eventManager.triggerEvent(Events.OnTouchStart, e);
    }
    onTouchEnd(e) {
        this.eventManager.triggerEvent(Events.OnTouchEnd, e);
    }
    onTouchMove(e) {
        this.eventManager.triggerEvent(Events.OnTouchMove, e);
    }
    onSessionEnd() {
        this.eventManager.triggerEvent(Events.OnSessionEnd);
    }
    onHitTestResult(e) {
        this.eventManager.triggerEvent(Events.OnHitTestResult, e);
    }
    onAcceleration(e) {
        if ((this.mode === TrackingMode.Spatial || this.surfaceMode === SurfaceMode.SLAM || this.mode === TrackingMode.Image && this.imageTrackingMode === ImageTrackingMode.World && !this.usingWebXR) && this.started) {
            let t = e;
            this.uiManager.isPortrait() || (t.x *= -1,
            t.y *= -1),
            t.z *= -1;
            const a = t.toArray().concat(0);
            this.nativeManager.nativeSDK.HEAPF64.set(a, this.nativeManager.nativeSDK.imuAccData / 8),
            this.nativeManager.nativeSDK._OX_ProcessIMUAcceleration(this.nativeManager.nativeSDK.imuAccData);
        }
    }
    onRotation(e) {
        if (this.lastRotation = e.clone(),
        this.surfaceMode === SurfaceMode.Gyroscope || this.surfaceMode === SurfaceMode.SLAM && !this.started) {
            let t = new Matrix4;
            t.setRotation(e),
            this.onPose(t.toArray());
        } else if (this.hasDetectedOnce && this.firstRotationPose && this.firstRotationOffset && this.mode === TrackingMode.Image && this.imageTrackingMode === ImageTrackingMode.Rotation) {
            let t = this.firstRotationPose.clone()
              , a = this.firstRotationOffset.clone();
            t.setRotation(a.multiply(e)),
            this.onPose(t.toArray());
        } else if ((this.mode === TrackingMode.Spatial || this.surfaceMode === SurfaceMode.SLAM || this.mode === TrackingMode.Image && this.imageTrackingMode === ImageTrackingMode.World && !this.usingWebXR) && this.started) {
            let t = e;
            this.uiManager.isPortrait() && t.multiply(mat3RotationZ90CW),
            this.nativeManager.nativeSDK.HEAPF64.set(t.toArray(), this.nativeManager.nativeSDK.imuRotData / 8),
            this.nativeManager.nativeSDK._OX_ProcessIMURotation(this.nativeManager.nativeSDK.imuRotData);
        }
    }
    onFrame(e) {
        this.eventManager.triggerEvent(Events.OnFrame, e);
    }
    subscribe(e, t) {
        return this.eventManager.addEventListener(e, t)
    }
    unsubscribe(e) {
        this.eventManager.removeEventListener(e);
    }
    getSLAMMap() {
        return this.nativeManager.getSLAMMap()
    }
    getSLAMTrackingPoints() {
        return this.nativeManager.getSLAMTrackingPoints()
    }
    raycast(e, t, a, i, n, s) {
        return this.nativeManager.raycast(e, t, a, i, n, s)
    }
}
OnirixSDK.TrackingMode = TrackingMode,
OnirixSDK.ImageTrackingMode = ImageTrackingMode,
OnirixSDK.Events = Events;

export {OnirixSDK as default};
